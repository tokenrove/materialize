# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement roundtrip
SELECT 1
----
SELECT 1

parse-statement roundtrip
(SELECT 1)
----
SELECT 1

parse-statement
((SELECT 1))
----
SELECT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT (((SELECT 2)) + 3)
----
SELECT ((SELECT 2) + 3)

parse-statement roundtrip
SELECT ((((2 + 3)) - 4)) * 5
----
SELECT ((((2 + 3)) - 4)) * 5

parse-statement roundtrip
((SELECT 2)) UNION SELECT 2
----
(SELECT 2) UNION SELECT 2

parse-statement roundtrip
SELECT (((SELECT 2)) UNION SELECT 2)
----
SELECT ((SELECT 2) UNION SELECT 2)

parse-statement roundtrip
SELECT (((2)) UNION SELECT 2)
----
error: Expected right parenthesis, found UNION
SELECT (((2)) UNION SELECT 2)
              ^

parse-statement roundtrip
SELECT (SELECT 2) UNION (SELECT 2), 1
----
error: Expected end of statement, found comma
SELECT (SELECT 2) UNION (SELECT 2), 1
                                  ^

parse-statement roundtrip
(SELECT LIMIT 1) LIMIT 1
----
error: multiple LIMIT/FETCH clauses not allowed
(SELECT LIMIT 1) LIMIT 1
                 ^

parse-statement roundtrip
(SELECT LIMIT 1) FETCH FIRST ROW
----
error: Expected end of statement, found FETCH
(SELECT LIMIT 1) FETCH FIRST ROW
                 ^

parse-statement roundtrip
(SELECT 1) LIMIT 1
----
SELECT 1 LIMIT 1

parse-statement roundtrip
(SELECT 1 ORDER BY 1) ORDER BY 1
----
error: multiple ORDER BY clauses not allowed
(SELECT 1 ORDER BY 1) ORDER BY 1
                            ^

parse-statement roundtrip
(SELECT 1) ORDER BY 1
----
SELECT 1 ORDER BY 1

parse-statement roundtrip
WITH a AS (SELECT 1) (WITH b AS (SELECT 2) SELECT 3)
----
error: multiple WITH clauses not allowed
WITH a AS (SELECT 1) (WITH b AS (SELECT 2) SELECT 3)
                                                    ^

parse-statement roundtrip
(WITH b AS (SELECT 2) SELECT 3)
----
WITH b AS (SELECT 2) SELECT 3

parse-statement roundtrip
VALUES (1)
----
VALUES (1)

parse-statement roundtrip
SELECT (1)
----
SELECT (1)

parse-statement roundtrip
SELECT
----
SELECT

parse-statement
SELECT (SELECT)
----
SELECT (SELECT)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Subquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT )
----
error: Expected end of statement, found right parenthesis
SELECT )
       ^

parse-statement roundtrip
SELECT LIMIT 1
----
SELECT LIMIT 1

parse-statement roundtrip
SELECT (1, 2)
----
SELECT ROW(1, 2)

parse-statement roundtrip
SELECT (1, 2)
----
SELECT ROW(1, 2)

parse-statement roundtrip
SELECT ROW()
----
SELECT ROW()

parse-statement roundtrip
SELECT ROW(1)
----
SELECT ROW(1)

parse-statement roundtrip
SELECT ROW(1, 2)
----
SELECT ROW(1, 2)

parse-statement
SELECT id, fname, lname FROM customer WHERE id = 1 LIMIT 5
----
SELECT id, fname, lname FROM customer WHERE id = 1 LIMIT 5
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("id")]), expr2: Some(Value(Number("1"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("5")) }), offset: None }, as_of: None })

# LIMIT should not be parsed as an alias.

parse-statement
SELECT id FROM customer LIMIT 1
----
SELECT id FROM customer LIMIT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT 1 LIMIT 5
----
SELECT 1 LIMIT 5
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("5")) }), offset: None }, as_of: None })

parse-statement
SELECT DISTINCT name FROM customer
----
SELECT DISTINCT name FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(EntireRow), projection: [Expr { expr: Identifier([Ident("name")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT DISTINCT ON (a, b) name, a, b FROM customer
----
SELECT DISTINCT ON (a, b) name, a, b FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(On([Identifier([Ident("a")]), Identifier([Ident("b")])])), projection: [Expr { expr: Identifier([Ident("name")]), alias: None }, Expr { expr: Identifier([Ident("a")]), alias: None }, Expr { expr: Identifier([Ident("b")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT DISTINCT ON (a, b) name, a, b FROM customer
----
SELECT DISTINCT ON (a, b) name, a, b FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(On([Identifier([Ident("a")]), Identifier([Ident("b")])])), projection: [Expr { expr: Identifier([Ident("name")]), alias: None }, Expr { expr: Identifier([Ident("a")]), alias: None }, Expr { expr: Identifier([Ident("b")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT DISTINCT ON (a, b) name, a, b FROM customer
----
SELECT DISTINCT ON (a, b) name, a, b FROM customer

parse-statement
SELECT DISTINCT ON (a + b, NOT c) a, b, c FROM customer
----
SELECT DISTINCT ON (a + b, NOT c) a, b, c FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(On([Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("a")]), expr2: Some(Identifier([Ident("b")])) }, Not { expr: Identifier([Ident("c")]) }])), projection: [Expr { expr: Identifier([Ident("a")]), alias: None }, Expr { expr: Identifier([Ident("b")]), alias: None }, Expr { expr: Identifier([Ident("c")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT ALL name FROM customer
----
SELECT name FROM customer

parse-statement
SELECT * FROM foo
----
SELECT * FROM foo
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("foo")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo.* FROM foo
----
SELECT foo.* FROM foo
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: QualifiedWildcard([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("foo")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT (x).a, (x).a.b.c
----
SELECT (x).a, (x).a.b.c
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: FieldAccess { expr: Nested(Identifier([Ident("x")])), field: Ident("a") }, alias: None }, Expr { expr: FieldAccess { expr: FieldAccess { expr: FieldAccess { expr: Nested(Identifier([Ident("x")])), field: Ident("a") }, field: Ident("b") }, field: Ident("c") }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT (1.a)
----
error: Expected right parenthesis, found identifier "a"
SELECT (1.a)
          ^

parse-statement
SELECT (x).*.*
----
SELECT (x).*.*
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: WildcardAccess(WildcardAccess(Nested(Identifier([Ident("x")])))), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT count(employee.*) FROM "order" JOIN employee ON "order".employee = employee.id
----
SELECT count(employee.*) FROM "order" JOIN employee ON "order".employee = employee.id

parse-statement
SELECT a.col + 1 AS newname FROM foo AS a
----
SELECT a.col + 1 AS newname FROM foo AS a
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("a"), Ident("col")]), expr2: Some(Value(Number("1"))) }, alias: Some(Ident("newname")) }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("foo")])), alias: Some(TableAlias { name: Ident("a"), columns: [], strict: false }) }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT a.col + 1 AS newname FROM foo AS a
----
SELECT a.col + 1 AS newname FROM foo AS a

parse-statement roundtrip
SELECT a.col + 1 newname FROM foo AS a
----
SELECT a.col + 1 AS newname FROM foo AS a

parse-statement roundtrip
SELECT concat('CONCAT', ' ', 'function')
----
SELECT concat('CONCAT', ' ', 'function')

parse-statement roundtrip
SELECT concat(first_name, ' ', last_name) FROM customer
----
SELECT concat(first_name, ' ', last_name) FROM customer

parse-statement roundtrip
SELECT concat('Concat with ', NULL) AS result_string
----
SELECT concat('Concat with ', NULL) AS result_string

parse-statement roundtrip
SELECT first_name, concat('A', 3, 'chars') FROM customer
----
SELECT first_name, concat('A', 3, 'chars') FROM customer

parse-statement roundtrip
SELECT count(*) FROM customer
----
SELECT count(*) FROM customer

parse-statement
SELECT count(*) FILTER (WHERE foo) FROM customer
----
SELECT count(*) FILTER (WHERE foo) FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Function(Function { name: UnresolvedObjectName([Ident("count")]), args: Star, filter: Some(Identifier([Ident("foo")])), over: None, distinct: false }), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT count(DISTINCT + x) FROM customer
----
SELECT count(DISTINCT + x) FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Function(Function { name: UnresolvedObjectName([Ident("count")]), args: Args { args: [Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("x")]), expr2: None }], order_by: [] }, filter: None, over: None, distinct: true }), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT count(ALL + x) FROM customer
----
SELECT count(+ x) FROM customer

parse-statement roundtrip
SELECT count(+ x) FROM customer
----
SELECT count(+ x) FROM customer

parse-statement
SELECT count(* ORDER BY a)
----
error: Expected right parenthesis, found ORDER
SELECT count(* ORDER BY a)
               ^

parse-statement
SELECT array_agg(ORDER BY a)
----
error: expected expression, but found reserved keyword
SELECT array_agg(ORDER BY a)
                 ^


parse-statement
SELECT array_agg(b ORDER BY a)
----
SELECT array_agg(b ORDER BY a)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Function(Function { name: UnresolvedObjectName([Ident("array_agg")]), args: Args { args: [Identifier([Ident("b")])], order_by: [OrderByExpr { expr: Identifier([Ident("a")]), asc: None, nulls_last: None }] }, filter: None, over: None, distinct: false }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })


# Parameters

parse-statement
SELECT $
----
error: unterminated dollar-quoted string
SELECT $
       ^

parse-statement
SELECT $q
----
error: unterminated dollar-quoted string
SELECT $q
       ^

parse-statement
SELECT $1$2
----
error: Expected end of statement, found parameter "$2"
SELECT $1$2
         ^

parse-statement
SELECT $18446744073709551616
----
error: invalid parameter number
SELECT $18446744073709551616
       ^

parse-statement
SELECT c FROM t WHERE c NOT (
----
error: Expected end of statement, found NOT
SELECT c FROM t WHERE c NOT (
                        ^

parse-statement roundtrip
SELECT name COLLATE "de_DE" FROM customer
----
SELECT name COLLATE "de_DE" FROM customer

parse-statement roundtrip
SELECT customer.address.state FROM foo
----
SELECT customer.address.state FROM foo

parse-statement
SELECT * FROM customers WHERE segment IN (SELECT segm FROM bar)
----
SELECT * FROM customers WHERE segment IN (SELECT segm FROM bar)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customers")])), alias: None }, joins: [] }], selection: Some(InSubquery { expr: Identifier([Ident("segment")]), subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("segm")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, negated: false }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE x IN (VALUES (1))
----
SELECT * FROM t WHERE x IN (VALUES (1))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t")])), alias: None }, joins: [] }], selection: Some(InSubquery { expr: Identifier([Ident("x")]), subquery: Query { ctes: Simple([]), body: Values(Values([[Value(Number("1"))]])), order_by: [], limit: None, offset: None }, negated: false }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customers WHERE age BETWEEN 25 AND 32
----
SELECT * FROM customers WHERE age BETWEEN 25 AND 32
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customers")])), alias: None }, joins: [] }], selection: Some(Between { expr: Identifier([Ident("age")]), negated: false, low: Value(Number("25")), high: Value(Number("32")) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customers WHERE age NOT BETWEEN 25 AND 32
----
SELECT * FROM customers WHERE age NOT BETWEEN 25 AND 32
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customers")])), alias: None }, joins: [] }], selection: Some(Between { expr: Identifier([Ident("age")]), negated: true, low: Value(Number("25")), high: Value(Number("32")) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NULL
----
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NULL
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t")])), alias: None }, joins: [] }], selection: Some(IsExpr { expr: Between { expr: Value(Number("1")), negated: false, low: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Value(Number("2"))) }, high: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("3")), expr2: Some(Value(Number("4"))) } }, construct: Null, negated: false }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NOT FALSE
----
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NOT FALSE
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t")])), alias: None }, joins: [] }], selection: Some(IsExpr { expr: Between { expr: Value(Number("1")), negated: false, low: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Value(Number("2"))) }, high: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("3")), expr2: Some(Value(Number("4"))) } }, construct: False, negated: true }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })


parse-statement
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
----
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t")])), alias: None }, joins: [] }], selection: Some(And { left: Op { op: Op { namespace: [], op: "=" }, expr1: Value(Number("1")), expr2: Some(Value(Number("1"))) }, right: Between { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Identifier([Ident("x")])) }, negated: false, low: Value(Number("1")), high: Value(Number("2")) } }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
----
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t")])), alias: None }, joins: [] }], selection: Some(And { left: Op { op: Op { namespace: [], op: "=" }, expr1: Value(Number("1")), expr2: Some(Value(Number("1"))) }, right: Between { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Identifier([Ident("x")])) }, negated: false, low: Value(Number("1")), high: Value(Number("2")) } }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer WHERE id < 5 ORDER BY lname ASC, fname DESC, id
----
SELECT id, fname, lname FROM customer WHERE id < 5 ORDER BY lname ASC, fname DESC, id
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "<" }, expr1: Identifier([Ident("id")]), expr2: Some(Value(Number("5"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("id")]), asc: None, nulls_last: None }], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id
----
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("id")]), asc: None, nulls_last: None }], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id NULLS FIRST
----
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id NULLS FIRST
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("id")]), asc: None, nulls_last: Some(false) }], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer WHERE id < 5
ORDER BY lname ASC, fname DESC NULLS LAST LIMIT 2
----
SELECT id, fname, lname FROM customer WHERE id < 5 ORDER BY lname ASC, fname DESC NULLS LAST LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "<" }, expr1: Identifier([Ident("id")]), expr2: Some(Value(Number("5"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: Some(true) }], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer GROUP BY lname, fname
----
SELECT id, fname, lname FROM customer GROUP BY lname, fname
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("lname")]), Identifier([Ident("fname")])], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
----
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("foo")])], having: Some(Op { op: Op { namespace: [], op: ">" }, expr1: Function(Function { name: UnresolvedObjectName([Ident("count")]), args: Star, filter: None, over: None, distinct: false }), expr2: Some(Value(Number("1"))) }), options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
----
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("foo")])], having: Some(Op { op: Op { namespace: [], op: ">" }, expr1: Function(Function { name: UnresolvedObjectName([Ident("count")]), args: Star, filter: None, over: None, distinct: false }), expr2: Some(Value(Number("1"))) }), options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar GROUP BY foo HAVING 1 = 1
----
SELECT foo FROM bar GROUP BY foo HAVING 1 = 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("foo")])], having: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Value(Number("1")), expr2: Some(Value(Number("1"))) }), options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT id, fname, lname FROM customer WHERE id = 1 LIMIT ALL
----
SELECT id, fname, lname FROM customer WHERE id = 1

parse-statement roundtrip
SELECT row_number() OVER (ORDER BY dt DESC),
       sum(foo) OVER (PARTITION BY a, b ORDER BY c, d
           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
       avg(bar) OVER (ORDER BY a
           RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
       max(baz) OVER (ORDER BY a
           ROWS UNBOUNDED PRECEDING)
       FROM foo
----
SELECT row_number() OVER (ORDER BY dt DESC), sum(foo) OVER (PARTITION BY a, b ORDER BY c, d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), avg(bar) OVER (ORDER BY a RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING), max(baz) OVER (ORDER BY a ROWS UNBOUNDED PRECEDING) FROM foo

parse-statement roundtrip
SELECT a, count(1), min(b), max(b) FROM foo GROUP BY a
----
SELECT a, count(1), min(b), max(b) FROM foo GROUP BY a

parse-statement roundtrip
SELECT a + b, 2 + a, 2.5 + a, a_f + b_f, 2 + a_f, 2.5 + a_f FROM c
----
SELECT a + b, 2 + a, 2.5 + a, a_f + b_f, 2 + a_f, 2.5 + a_f FROM c

parse-statement roundtrip
SELECT a - b, 2 - a, 2.5 - a, a_f - b_f, 2 - a_f, 2.5 - a_f FROM c
----
SELECT a - b, 2 - a, 2.5 - a, a_f - b_f, 2 - a_f, 2.5 - a_f FROM c

parse-statement roundtrip
SELECT alias."bar baz", myfun(), "simple id" AS "column alias" FROM "a table" AS alias
----
SELECT alias."bar baz", myfun(), "simple id" AS "column alias" FROM "a table" AS alias

parse-statement roundtrip
CREATE TABLE foo (bar int)
----
CREATE TABLE foo (bar int4)

parse-statement roundtrip
SELECT * FROM fn(1, 2) AS foo, schema.bar AS bar WITH (nolock)
----
error: Expected end of statement, found WITH
SELECT * FROM fn(1, 2) AS foo, schema.bar AS bar WITH (nolock)
                                                 ^

parse-statement
SELECT * FROM t1, t2
----
SELECT * FROM t1, t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1a NATURAL JOIN t1b, t2a NATURAL JOIN t2b
----
SELECT * FROM t1a NATURAL JOIN t1b, t2a NATURAL JOIN t2b
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t1b")])), alias: None }, join_operator: Inner(Natural) }] }, TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t2a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2b")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 CROSS JOIN t2
----
SELECT * FROM t1 CROSS JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: CrossJoin }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 JOIN t2 AS foo USING (c1)
----
SELECT * FROM t1 JOIN t2 AS foo USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: Some(TableAlias { name: Ident("foo"), columns: [], strict: false }) }, join_operator: Inner(Using([Ident("c1")])) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 JOIN t2 foo USING (c1)
----
SELECT * FROM t1 JOIN t2 AS foo USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: Some(TableAlias { name: Ident("foo"), columns: [], strict: false }) }, join_operator: Inner(Using([Ident("c1")])) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL JOIN t2
----
SELECT * FROM t1 NATURAL JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL LEFT JOIN t2
----
SELECT * FROM t1 NATURAL LEFT JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: LeftOuter(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL RIGHT JOIN t2
----
SELECT * FROM t1 NATURAL RIGHT JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: RightOuter(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL FULL JOIN t2
----
SELECT * FROM t1 NATURAL FULL JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: FullOuter(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 natural
----
error: Expected a join type after NATURAL, found EOF
SELECT * FROM t1 natural
                        ^

parse-statement
SELECT c1, c2 FROM t1, t4 JOIN t2 ON t2.c = t1.c LEFT JOIN t3 USING (q, c) WHERE t4.c = t1.c
----
SELECT c1, c2 FROM t1, t4 JOIN t2 ON t2.c = t1.c LEFT JOIN t3 USING (q, c) WHERE t4.c = t1.c
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }, Expr { expr: Identifier([Ident("c2")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t4")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("t2"), Ident("c")]), expr2: Some(Identifier([Ident("t1"), Ident("c")])) })) }, Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t3")])), alias: None }, join_operator: LeftOuter(Using([Ident("q"), Ident("c")])) }] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("t4"), Ident("c")]), expr2: Some(Identifier([Ident("t1"), Ident("c")])) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM a NATURAL JOIN (b NATURAL JOIN (c NATURAL JOIN d NATURAL JOIN e)) NATURAL JOIN (f NATURAL JOIN (g NATURAL JOIN h))
----
SELECT * FROM a NATURAL JOIN (b NATURAL JOIN (c NATURAL JOIN d NATURAL JOIN e)) NATURAL JOIN (f NATURAL JOIN (g NATURAL JOIN h))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("b")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("c")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("d")])), alias: None }, join_operator: Inner(Natural) }, Join { relation: Table { name: Name(UnresolvedObjectName([Ident("e")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }, Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("f")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("g")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("h")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (a NATURAL JOIN b) NATURAL JOIN c
----
SELECT * FROM (a NATURAL JOIN b) NATURAL JOIN c
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("b")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("c")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (a NATURAL JOIN b) c NATURAL JOIN d
----
SELECT * FROM (a NATURAL JOIN b) AS c NATURAL JOIN d
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("b")])), alias: None }, join_operator: Inner(Natural) }] }, alias: Some(TableAlias { name: Ident("c"), columns: [], strict: false }) }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("d")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (((a NATURAL JOIN b)))
----
SELECT * FROM (((a NATURAL JOIN b)))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("b")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, joins: [] }, alias: None }, joins: [] }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM a NATURAL JOIN (((b NATURAL JOIN c)))
----
SELECT * FROM a NATURAL JOIN (((b NATURAL JOIN c)))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("b")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("c")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, joins: [] }, alias: None }, joins: [] }, alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (a NATURAL JOIN (b))
----
error: Expected joined table, found right parenthesis
SELECT * FROM (a NATURAL JOIN (b))
                                ^

parse-statement
SELECT c1 FROM t1 INNER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: Inner(Using([Ident("c1")])) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT c1 FROM t1 LEFT OUTER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 LEFT JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: LeftOuter(Using([Ident("c1")])) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT c1 FROM t1 RIGHT OUTER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 RIGHT JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: RightOuter(Using([Ident("c1")])) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT c1 FROM t1 FULL OUTER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 FULL JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("t2")])), alias: None }, join_operator: FullOuter(Using([Ident("c1")])) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM a OUTER JOIN b ON 1
----
error: Expected LEFT, RIGHT, or FULL, found OUTER
SELECT * FROM a OUTER JOIN b ON 1
                ^

parse-statement
WITH
  a AS (SELECT 1 AS foo),
  b AS (SELECT 2 AS bar)
SELECT foo + bar FROM a, b
----
WITH a AS (SELECT 1 AS foo), b AS (SELECT 2 AS bar) SELECT foo + bar FROM a, b
=>
Select(SelectStatement { query: Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("a"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: Some(Ident("foo")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }, Cte { alias: TableAlias { name: Ident("b"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("2")), alias: Some(Ident("bar")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("foo")]), expr2: Some(Identifier([Ident("bar")])) }, alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("b")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
CREATE VIEW v AS
  WITH
    a AS (SELECT 1 AS foo),
    b AS (SELECT 2 AS bar)
  SELECT foo + bar FROM a, b
----
CREATE VIEW v AS WITH a AS (SELECT 1 AS foo), b AS (SELECT 2 AS bar) SELECT foo + bar FROM a, b
=>
CreateView(CreateViewStatement { if_exists: Error, temporary: false, definition: ViewDefinition { name: UnresolvedObjectName([Ident("v")]), columns: [], query: Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("a"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: Some(Ident("foo")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }, Cte { alias: TableAlias { name: Ident("b"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("2")), alias: Some(Ident("bar")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("foo")]), expr2: Some(Identifier([Ident("bar")])) }, alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("b")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } } })

parse-statement roundtrip
WITH cte (col1, col2) AS (SELECT foo, bar FROM baz) SELECT * FROM cte
----
WITH cte (col1, col2) AS (SELECT foo, bar FROM baz) SELECT * FROM cte

parse-statement roundtrip
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a CROSS JOIN (SELECT y FROM bar) AS b
----
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a CROSS JOIN (SELECT y FROM bar) AS b

parse-statement roundtrip
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a (x) CROSS JOIN (SELECT y FROM bar) AS b (y)
----
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a (x) CROSS JOIN (SELECT y FROM bar) AS b (y)

parse-statement roundtrip
SELECT * FROM (((SELECT 1)))
----
SELECT * FROM (SELECT 1)

parse-statement roundtrip
SELECT * FROM t NATURAL JOIN (((SELECT 1)))
----
SELECT * FROM t NATURAL JOIN (SELECT 1)

parse-statement roundtrip
SELECT * FROM (((SELECT 1) UNION (SELECT 2)) AS t1 NATURAL JOIN t2)
----
SELECT * FROM (((SELECT 1) UNION (SELECT 2)) AS t1 NATURAL JOIN t2)

parse-statement roundtrip
SELECT * FROM ((SELECT 1) AS t)
----
error: Expected joined table, found right parenthesis
SELECT * FROM ((SELECT 1) AS t)
                              ^

parse-statement roundtrip
SELECT * FROM (VALUES (1), (2), (3))
----
SELECT * FROM (VALUES (1), (2), (3))

parse-statement roundtrip
SELECT * FROM (VALUES (1), (2), (3)), (VALUES (1, 2, 3))
----
SELECT * FROM (VALUES (1), (2), (3)), (VALUES (1, 2, 3))

parse-statement roundtrip
SELECT * FROM (VALUES (1)) UNION VALUES (1)
----
SELECT * FROM (VALUES (1)) UNION VALUES (1)

parse-statement roundtrip
SELECT * FROM t WHERE EXISTS (SELECT 1)
----
SELECT * FROM t WHERE EXISTS (SELECT 1)

parse-statement roundtrip
SELECT * FROM t WHERE NOT EXISTS (SELECT 1)
----
SELECT * FROM t WHERE NOT EXISTS (SELECT 1)

parse-statement roundtrip
SELECT * FROM t WHERE EXISTS (WITH u AS (SELECT 1) SELECT * FROM u)
----
SELECT * FROM t WHERE EXISTS (WITH u AS (SELECT 1) SELECT * FROM u)

parse-statement roundtrip
SELECT EXISTS (SELECT 1)
----
SELECT EXISTS (SELECT 1)

parse-statement
SELECT foo FROM bar OFFSET 2 ROWS
----
SELECT foo FROM bar OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 OFFSET 2 ROWS
----
SELECT foo FROM bar WHERE foo = 4 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar ORDER BY baz OFFSET 2 ROWS
----
SELECT foo FROM bar ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2 ROWS
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2 ROWS) OFFSET 2 ROWS
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM LATERAL bar(1)
----
SELECT foo FROM bar(1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Function { function: TableFunction { name: UnresolvedObjectName([Ident("bar")]), args: Args { args: [Value(Number("1"))], order_by: [] } }, alias: None, with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM LATERAL bar
----
error: Expected left parenthesis, found EOF
SELECT foo FROM LATERAL bar
                           ^

parse-statement
SELECT 'foo' OFFSET 0 ROWS
----
SELECT 'foo' OFFSET 0
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(String("foo")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("0"))) }, as_of: None })

parse-statement
SELECT foo FROM bar OFFSET 2
----
SELECT foo FROM bar OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 OFFSET 2
----
SELECT foo FROM bar WHERE foo = 4 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar ORDER BY baz OFFSET 2
----
SELECT foo FROM bar ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2 ROWS) OFFSET 2
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2 ROWS
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT 'foo' OFFSET 0
----
SELECT 'foo' OFFSET 0
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(String("foo")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("0"))) }, as_of: None })

parse-statement roundtrip
SELECT foo FROM bar OFFSET 1 ROW
----
SELECT foo FROM bar OFFSET 1

parse-statement
SELECT foo FROM bar FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT 'foo' FETCH FIRST 2 ROWS ONLY
----
SELECT 'foo' LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(String("foo")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST ROWS ONLY
----
SELECT foo FROM bar LIMIT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar WHERE foo = 4 LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar ORDER BY baz FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar ORDER BY baz LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz FETCH FIRST 2 ROWS WITH TIES
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz FETCH FIRST 2 ROWS WITH TIES
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: Some(Limit { with_ties: true, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST 50 PERCENT ROWS ONLY
----
error: Expected one of ROW or ROWS, found identifier "percent"
SELECT foo FROM bar FETCH FIRST 50 PERCENT ROWS ONLY
                                   ^

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2 ROWS FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz LIMIT 2 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar FETCH FIRST 2 ROWS ONLY) FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM (SELECT * FROM bar LIMIT 2) LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2 ROWS FETCH FIRST 2 ROWS ONLY) OFFSET 2 ROWS FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM (SELECT * FROM bar LIMIT 2 OFFSET 2) LIMIT 2 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST 10 ROW ONLY
----
SELECT foo FROM bar LIMIT 10
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("10")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH NEXT 10 ROW ONLY
----
SELECT foo FROM bar LIMIT 10
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("10")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH NEXT 10 ROWS WITH TIES
----
SELECT foo FROM bar FETCH FIRST 10 ROWS WITH TIES
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: true, quantity: Value(Number("10")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH NEXT ROWS WITH TIES
----
SELECT foo FROM bar FETCH FIRST 1 ROWS WITH TIES
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: true, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST ROWS ONLY
----
SELECT foo FROM bar LIMIT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT * FROM customer LEFT JOIN (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
----
SELECT * FROM customer LEFT JOIN (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [Join { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("order")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("order"), Ident("customer")]), expr2: Some(Identifier([Ident("customer"), Ident("id")])) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("3")) }), offset: None }, alias: Some(TableAlias { name: Ident("order"), columns: [], strict: false }) }, join_operator: LeftOuter(On(Value(Boolean(true)))) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customer LEFT JOIN LATERAL (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
----
SELECT * FROM customer LEFT JOIN LATERAL (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [Join { relation: Derived { lateral: true, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("order")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("order"), Ident("customer")]), expr2: Some(Identifier([Ident("customer"), Ident("id")])) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("3")) }), offset: None }, alias: Some(TableAlias { name: Ident("order"), columns: [], strict: false }) }, join_operator: LeftOuter(On(Value(Boolean(true)))) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customer LEFT JOIN LATERAL generate_series(1, customer.id) ON true
----
SELECT * FROM customer LEFT JOIN generate_series(1, customer.id) ON true
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [Join { relation: Function { function: TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("1")), Identifier([Ident("customer"), Ident("id")])], order_by: [] } }, alias: None, with_ordinality: false }, join_operator: LeftOuter(On(Value(Boolean(true)))) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM LATERAL ROWS FROM (generate_series(1, 2), generate_series(3, 5))
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: None, with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM LATERAL ROWS FROM (generate_series(1, 2), generate_series(3, 5)) AS alias
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5)) AS alias
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: Some(TableAlias { name: Ident("alias"), columns: [], strict: false }), with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM generate_series(1, 2) WITH ORDINALITY
----
SELECT * FROM generate_series(1, 2) WITH ORDINALITY
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Function { function: TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, alias: None, with_ordinality: true }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM ROWS FROM (generate_series(1, 2) WITH ORDINALITY)
----
error: Expected right parenthesis, found WITH
SELECT * FROM ROWS FROM (generate_series(1, 2) WITH ORDINALITY)
                                               ^

parse-statement
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5)) WITH ORDINALITY
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5)) WITH ORDINALITY
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: None, with_ordinality: true }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5))
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: UnresolvedObjectName([Ident("generate_series")]), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: None, with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

# Ensure parsing AS OF is case-insensitive
parse-statement
SELECT * FROM data as of now()
----
SELECT * FROM data AS OF now()
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("data")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: Some(At(Function(Function { name: UnresolvedObjectName([Ident("now")]), args: Args { args: [], order_by: [] }, filter: None, over: None, distinct: false }))) })

parse-statement
SELECT * FROM data AS OF now()
----
SELECT * FROM data AS OF now()
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("data")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: Some(At(Function(Function { name: UnresolvedObjectName([Ident("now")]), args: Args { args: [], order_by: [] }, filter: None, over: None, distinct: false }))) })


parse-statement
SELECT * FROM data AS OF AT LEAST 5
----
SELECT * FROM data AS OF AT LEAST 5
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("data")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: Some(AtLeast(Value(Number("5")))) })

# Query hints
parse-statement
SELECT * FROM foo OPTIONS (bar = 7)
----
error: Expected EXPECTED, found identifier "bar"
SELECT * FROM foo OPTIONS (bar = 7)
                           ^

parse-statement
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 7)
----
error: Expected EXPECTED, found identifier "bar"
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 7)
                                                    ^

parse-statement
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 'baz')
----
error: Expected EXPECTED, found identifier "bar"
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 'baz')
                                                    ^

parse-statement
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar)
----
error: Expected EXPECTED, found identifier "bar"
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar)
                                                    ^

parse-statement
SELECT a, b, min(c) FROM ( SELECT a, b, min(d) as c GROUP BY a, b OPTIONS (bar = 7)) as agg GROUP BY a, b
----
error: Expected joined table, found comma
SELECT a, b, min(c) FROM ( SELECT a, b, min(d) as c GROUP BY a, b OPTIONS (bar = 7)) as agg GROUP BY a, b
                                   ^

# List subqueries
parse-statement
SELECT LIST[1, 2, 3]
----
SELECT LIST[1, 2, 3]
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: List([Value(Number("1")), Value(Number("2")), Value(Number("3"))]), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(SELECT 1)
----
SELECT LIST(SELECT 1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(SELECT 2 * 10)
----
SELECT LIST(SELECT 2 * 10)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "*" }, expr1: Value(Number("2")), expr2: Some(Value(Number("10"))) }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(SELECT customer.id FROM customer JOIN user on customer.id = user.id LIMIT 12)
----
SELECT LIST(SELECT customer.id FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("customer"), Ident("id")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(
  WITH usps AS (SELECT 42)
    SELECT
      LIST[customer.id,
      LIST[customer.first_name, customer.last_name],
      LIST[LIST[customer.zip]]]
    FROM
      customer
    JOIN user on customer.id = user.id
  LIMIT 12)
----
SELECT LIST(WITH usps AS (SELECT 42) SELECT LIST[customer.id, LIST[customer.first_name, customer.last_name], LIST[LIST[customer.zip]]] FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: List([Identifier([Ident("customer"), Ident("id")]), List([Identifier([Ident("customer"), Ident("first_name")]), Identifier([Ident("customer"), Ident("last_name")])]), List([List([Identifier([Ident("customer"), Ident("zip")])])])]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(
  WITH usps AS (SELECT 42)
    SELECT * FROM usps
)
----
SELECT LIST(WITH usps AS (SELECT 42) SELECT * FROM usps)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("usps")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

# Array subqueries
parse-statement
SELECT ARRAY[1, 2, 3]
----
SELECT ARRAY[1, 2, 3]
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Array([Value(Number("1")), Value(Number("2")), Value(Number("3"))]), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(SELECT 1)
----
SELECT ARRAY(SELECT 1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(SELECT 2 * 10)
----
SELECT ARRAY(SELECT 2 * 10)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "*" }, expr1: Value(Number("2")), expr2: Some(Value(Number("10"))) }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(SELECT customer.id FROM customer JOIN user on customer.id = user.id LIMIT 12)
----
SELECT ARRAY(SELECT customer.id FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("customer"), Ident("id")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(
  WITH usps AS (SELECT 42)
    SELECT
      ARRAY[customer.id,
      ARRAY[customer.first_name, customer.last_name],
      ARRAY[ARRAY[customer.zip]]]
    FROM
      customer
    JOIN user on customer.id = user.id
  LIMIT 12)
----
SELECT ARRAY(WITH usps AS (SELECT 42) SELECT ARRAY[customer.id, ARRAY[customer.first_name, customer.last_name], ARRAY[ARRAY[customer.zip]]] FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: Array([Identifier([Ident("customer"), Ident("id")]), Array([Identifier([Ident("customer"), Ident("first_name")]), Identifier([Ident("customer"), Ident("last_name")])]), Array([Array([Identifier([Ident("customer"), Ident("zip")])])])]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedObjectName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(
  WITH usps AS (SELECT 42)
    SELECT * FROM usps
)
----
SELECT ARRAY(WITH usps AS (SELECT 42) SELECT * FROM usps)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("usps")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT count(DISTINCT *) FROM foo
----
error: DISTINCT * not supported as function args
SELECT count(DISTINCT *) FROM foo
                      ^

parse-statement
SELECT * FROM (SHOW TABLES)
----
SELECT * FROM (SHOW TABLES)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Show(ShowObjects(ShowObjectsStatement { object_type: Table, from: None, filter: None })), order_by: [], limit: None, offset: None }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT NULLIF(x, '')
----
SELECT NULLIF(x, '')
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: NullIf { l_expr: Identifier([Ident("x")]), r_expr: Value(String("")) }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

# parse a plausibly correct WITH MUTUALLY RECURSIVE query.
parse-statement roundtrip
WITH MUTUALLY RECURSIVE foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
----
WITH MUTUALLY RECURSIVE foo (a int4, b int4) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int4) AS (SELECT a FROM foo) SELECT * FROM bar


# parse a semantically unacceptable but parseable WITH MUTUALLY RECURSIVE.
parse-statement roundtrip
WITH MUTUALLY RECURSIVE foo (a int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
----
WITH MUTUALLY RECURSIVE foo (a int4) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int4) AS (SELECT a FROM foo) SELECT * FROM bar

# fail to parse bindings that do not specify types
parse-statement roundtrip
WITH MUTUALLY RECURSIVE foo (a, b) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
----
error: Expected a data type name, found comma
WITH MUTUALLY RECURSIVE foo (a, b) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
                              ^

# regression test for #17047
parse-statement
SELECT * FROM t1 WHERE f1 = 1589 OR f1 = 9099 OR f1 = 4475 OR f1 = 5169 OR f1 = 2830 OR f1 = 455 OR f1 = 4669 OR f1 = 5881 OR f1 = 7122 OR f1 = 3406 OR f1 = 2639 OR f1 = 4815 OR f1 = 3279 OR f1 = 9708 OR f1 = 950 OR f1 = 379 OR f1 = 788 OR f1 = 6319 OR f1 = 9812 OR f1 = 8277 OR f1 = 9137 OR f1 = 4328 OR f1 = 9425 OR f1 = 6553 OR f1 = 3765 OR f1 = 2508 OR f1 = 8778 OR f1 = 4257 OR f1 = 4328 OR f1 = 8389 OR f1 = 4707 OR f1 = 8113 OR f1 = 1516 OR f1 = 2955 OR f1 = 3664 OR f1 = 1667 OR f1 = 5948 OR f1 = 4185 OR f1 = 115 OR f1 = 9360 OR f1 = 9644 OR f1 = 4534 OR f1 = 1933 OR f1 = 7064 OR f1 = 603 OR f1 = 3941 OR f1 = 25 OR f1 = 7860 OR f1 = 7078 OR f1 = 4597 OR f1 = 8228 OR f1 = 3079 OR f1 = 1722 OR f1 = 9509 OR f1 = 6305 OR f1 = 6926 OR f1 = 8643 OR f1 = 4971 OR f1 = 144 OR f1 = 2238 OR f1 = 7082 OR f1 = 8617 OR f1 = 9013 OR f1 = 4394 OR f1 = 485 OR f1 = 6024 OR f1 = 4573 OR f1 = 7337 OR f1 = 9414 OR f1 = 2296 OR f1 = 1894 OR f1 = 8346 OR f1 = 6895 OR f1 = 2413 OR f1 = 9623 OR f1 = 9702 OR f1 = 6376 OR f1 = 382 OR f1 = 2537 OR f1 = 1464 OR f1 = 4828 OR f1 = 6524 OR f1 = 226 OR f1 = 1280 OR f1 = 6153 OR f1 = 3583 OR f1 = 8853 OR f1 = 5763 OR f1 = 1985 OR f1 = 3537 OR f1 = 296 OR f1 = 7926 OR f1 = 8505 OR f1 = 9746 OR f1 = 1137 OR f1 = 1525 OR f1 = 8929 OR f1 = 1381 OR f1 = 3240 OR f1 = 2738 OR f1 = 1525 OR f1 = 3889 OR f1 = 7957 OR f1 = 2354 OR f1 = 1319 OR f1 = 7514 OR f1 = 6225 OR f1 = 4618 OR f1 = 6241 OR f1 = 9220 OR f1 = 3824 OR f1 = 8452 OR f1 = 5316 OR f1 = 5742 OR f1 = 952 OR f1 = 7738 OR f1 = 8934 OR f1 = 6251 OR f1 = 8709 OR f1 = 1281 OR f1 = 2807 OR f1 = 1191 OR f1 = 1704 OR f1 = 5670 OR f1 = 7343 OR f1 = 3200 OR f1 = 2394 OR f1 = 3699 OR f1 = 5802 OR f1 = 5318 OR f1 = 8198 OR f1 = 2358 OR f1 = 3809 OR f1 = 3067 OR f1 = 6558 OR f1 = 9784 OR f1 = 7527 OR f1 = 422 OR f1 = 9712 OR f1 = 1505 OR f1 = 666 OR f1 = 7978 OR f1 = 9837 OR f1 = 6095 OR f1 = 2 OR f1 = 4240 OR f1 = 2788 OR f1 = 3238 OR f1 = 5736 OR f1 = 6095 OR f1 = 6044 OR f1 = 3040 OR f1 = 5114 OR f1 = 4076 OR f1 = 7530 OR f1 = 687 OR f1 = 3919 OR f1 = 4908 OR f1 = 4277 OR f1 = 5402 OR f1 = 5965 OR f1 = 5552 OR f1 = 8031 OR f1 = 7067 OR f1 = 5985 OR f1 = 9568 OR f1 = 8374 OR f1 = 1012 OR f1 = 6239 OR f1 = 8280 OR f1 = 4097 OR f1 = 9957 OR f1 = 429 OR f1 = 1086 OR f1 = 1191 OR f1 = 8113 OR f1 = 3296 OR f1 = 9445 OR f1 = 5855 OR f1 = 9533 OR f1 = 5851 OR f1 = 1519 OR f1 = 3685 OR f1 = 2882 OR f1 = 9085 OR f1 = 2689 OR f1 = 2264 OR f1 = 9435 OR f1 = 6277 OR f1 = 8962 OR f1 = 6728 OR f1 = 6089 OR f1 = 6182 OR f1 = 6423 OR f1 = 8329 OR f1 = 1663 OR f1 = 6894 OR f1 = 4285 OR f1 = 4663 OR f1 = 9425 OR f1 = 1695 OR f1 = 4042 OR f1 = 8623 OR f1 = 4329 OR f1 = 6761 OR f1 = 6141 OR f1 = 8699 OR f1 = 473 OR f1 = 2544 OR f1 = 4535 OR f1 = 884 OR f1 = 6803 OR f1 = 9537 OR f1 = 7417 OR f1 = 7073 OR f1 = 6676 OR f1 = 5998 OR f1 = 4444 OR f1 = 1856 OR f1 = 7569 OR f1 = 4873 OR f1 = 2645 OR f1 = 6156 OR f1 = 8509 OR f1 = 4707 OR f1 = 9251 OR f1 = 3196 OR f1 = 2174 OR f1 = 6894 OR f1 = 4549 OR f1 = 2028 OR f1 = 4725 OR f1 = 9476 OR f1 = 1914 OR f1 = 2296 OR f1 = 6367 OR f1 = 3913 OR f1 = 8959 OR f1 = 3578 OR f1 = 1081 OR f1 = 8452 OR f1 = 9145 OR f1 = 5705 OR f1 = 3140 OR f1 = 2082 OR f1 = 9384 OR f1 = 350 OR f1 = 380 OR f1 = 2496 OR f1 = 8857 OR f1 = 7108 OR f1 = 6276 OR f1 = 679 OR f1 = 2128 OR f1 = 3738 OR f1 = 2152 OR f1 = 6798 OR f1 = 625 OR f1 = 793 OR f1 = 3760 OR f1 = 3046 OR f1 = 3889 OR f1 = 8540 OR f1 = 7766 OR f1 = 9662 OR f1 = 2978 OR f1 = 2765 OR f1 = 5015 OR f1 = 6142 OR f1 = 5897 OR f1 = 139 OR f1 = 19 OR f1 = 2030 OR f1 = 1856 OR f1 = 1574 OR f1 = 5312 OR f1 = 4294 OR f1 = 6249 OR f1 = 2112 OR f1 = 3582 OR f1 = 8900 OR f1 = 6947 OR f1 = 5738 OR f1 = 1454 OR f1 = 4114 OR f1 = 5868 OR f1 = 895 OR f1 = 4477 OR f1 = 4653 OR f1 = 7034 OR f1 = 8599 OR f1 = 7551 OR f1 = 3627 OR f1 = 7865 OR f1 = 2032 OR f1 = 3524 OR f1 = 9733 OR f1 = 6469 OR f1 = 1082 OR f1 = 5973 OR f1 = 1274 OR f1 = 3104 OR f1 = 7239 OR f1 = 8669 OR f1 = 3010 OR f1 = 6383 OR f1 = 8582 OR f1 = 9934 OR f1 = 2656 OR f1 = 399 OR f1 = 9346 OR f1 = 6508 OR f1 = 3376 OR f1 = 988 OR f1 = 2090 OR f1 = 9866 OR f1 = 9044 OR f1 = 1631 OR f1 = 6879 OR f1 = 2938 OR f1 = 3231 OR f1 = 4746 OR f1 = 2811 OR f1 = 4569 OR f1 = 1463 OR f1 = 8133 OR f1 = 9183 OR f1 = 7607 OR f1 = 3706 OR f1 = 4738 OR f1 = 6030 OR f1 = 700 OR f1 = 7704 OR f1 = 6072 OR f1 = 8298 OR f1 = 7642 OR f1 = 332 OR f1 = 7159 OR f1 = 7110 OR f1 = 5241 OR f1 = 8519 OR f1 = 7015 OR f1 = 1589 OR f1 = 7342 OR f1 = 8120 OR f1 = 9758 OR f1 = 1706 OR f1 = 8030 OR f1 = 7767 OR f1 = 3263 OR f1 = 3008 OR f1 = 2542 OR f1 = 439 OR f1 = 6153 OR f1 = 6333 OR f1 = 9485 OR f1 = 9601 OR f1 = 7321 OR f1 = 2614 OR f1 = 5807 OR f1 = 1157 OR f1 = 691 OR f1 = 3461 OR f1 = 570 OR f1 = 2508 OR f1 = 1756 OR f1 = 4280 OR f1 = 5794 OR f1 = 1414 OR f1 = 9920 OR f1 = 1068 OR f1 = 6566 OR f1 = 4087 OR f1 = 1541 OR f1 = 7021 OR f1 = 897 OR f1 = 3428 OR f1 = 6648 OR f1 = 1692 OR f1 = 9045 OR f1 = 8195 OR f1 = 151 OR f1 = 4396 OR f1 = 3366 OR f1 = 1932 OR f1 = 6113 OR f1 = 8722 OR f1 = 1766 OR f1 = 4561 OR f1 = 2284 OR f1 = 9307 OR f1 = 2478 OR f1 = 2490 OR f1 = 4597 OR f1 = 7202 OR f1 = 9064 OR f1 = 1789 OR f1 = 5523 OR f1 = 3266 OR f1 = 9234 OR f1 = 7688 OR f1 = 5837 OR f1 = 7192 OR f1 = 7047 OR f1 = 8452 OR f1 = 7872 OR f1 = 2020 OR f1 = 354 OR f1 = 6187 OR f1 = 4934 OR f1 = 3896 OR f1 = 8599 OR f1 = 793 OR f1 = 4069 OR f1 = 7424 OR f1 = 6753 OR f1 = 6295 OR f1 = 228 OR f1 = 2817 OR f1 = 9136 OR f1 = 778 OR f1 = 6087 OR f1 = 609 OR f1 = 122 OR f1 = 9762 OR f1 = 6474 OR f1 = 3058 OR f1 = 2538 OR f1 = 9994 OR f1 = 7047 OR f1 = 5012 OR f1 = 2708 OR f1 = 9507 OR f1 = 9003 OR f1 = 1231 OR f1 = 3816 OR f1 = 1168 OR f1 = 6382 OR f1 = 5679 OR f1 = 3270 OR f1 = 5064 OR f1 = 141 OR f1 = 8193 OR f1 = 5705 OR f1 = 3003 OR f1 = 2836 OR f1 = 5351 OR f1 = 4140 OR f1 = 5875 OR f1 = 9954 OR f1 = 5107 OR f1 = 3530 OR f1 = 3355 OR f1 = 6136 OR f1 = 4971 OR f1 = 6615 OR f1 = 7985 OR f1 = 6301 OR f1 = 7393 OR f1 = 1866 OR f1 = 1216 OR f1 = 6765 OR f1 = 6835 OR f1 = 1391 OR f1 = 332 OR f1 = 6488 OR f1 = 4586 OR f1 = 426 OR f1 = 1729 OR f1 = 5406 OR f1 = 5700 OR f1 = 3374 OR f1 = 9441 OR f1 = 7251 OR f1 = 3602 OR f1 = 4857 OR f1 = 1288 OR f1 = 9903 OR f1 = 1514 OR f1 = 1755 OR f1 = 1704 OR f1 = 501 OR f1 = 5765 OR f1 = 6435 OR f1 = 1726 OR f1 = 6895 OR f1 = 7335 OR f1 = 6320 OR f1 = 5963 OR f1 = 9292 OR f1 = 6130 OR f1 = 9772 OR f1 = 9265 OR f1 = 1952 OR f1 = 8429 OR f1 = 6127 OR f1 = 4291 OR f1 = 9479 OR f1 = 509 OR f1 = 4488 OR f1 = 2251 OR f1 = 8897 OR f1 = 7973 OR f1 = 2862 OR f1 = 6953 OR f1 = 9298 OR f1 = 6925 OR f1 = 591 OR f1 = 1903 OR f1 = 613 OR f1 = 1207 OR f1 = 5593 OR f1 = 803 OR f1 = 5297 OR f1 = 1238 OR f1 = 5049 OR f1 = 6515 OR f1 = 4516 OR f1 = 2475 OR f1 = 9045 OR f1 = 6097 OR f1 = 434 OR f1 = 5566 OR f1 = 8098 OR f1 = 1698 OR f1 = 9856 OR f1 = 6142 OR f1 = 2179 OR f1 = 8318 OR f1 = 4260 OR f1 = 5887 OR f1 = 4692 OR f1 = 2208 OR f1 = 869 OR f1 = 3278 OR f1 = 9140 OR f1 = 4566 OR f1 = 7360 OR f1 = 8444 OR f1 = 5289 OR f1 = 4050 OR f1 = 2631 OR f1 = 4331 OR f1 = 7200 OR f1 = 3036 OR f1 = 6829 OR f1 = 7500 OR f1 = 7108 OR f1 = 2135 OR f1 = 4580 OR f1 = 4905 OR f1 = 7775 OR f1 = 6454 OR f1 = 2856 OR f1 = 3646 OR f1 = 913 OR f1 = 123 OR f1 = 5192 OR f1 = 6095 OR f1 = 7349 OR f1 = 7271 OR f1 = 6092 OR f1 = 2561 OR f1 = 7960 OR f1 = 7786 OR f1 = 4958 OR f1 = 7585 OR f1 = 5983 OR f1 = 7056 OR f1 = 7917 OR f1 = 461 OR f1 = 3145 OR f1 = 9819 OR f1 = 4566 OR f1 = 6509 OR f1 = 9393 OR f1 = 3005 OR f1 = 7031 OR f1 = 8521 OR f1 = 3247 OR f1 = 7887 OR f1 = 8849 OR f1 = 3560 OR f1 = 4831 OR f1 = 4559 OR f1 = 4187 OR f1 = 8799 OR f1 = 9207 OR f1 = 5418 OR f1 = 8434 OR f1 = 4344 OR f1 = 5265 OR f1 = 65 OR f1 = 6202 OR f1 = 8343 OR f1 = 8530 OR f1 = 2534 OR f1 = 6277 OR f1 = 4771 OR f1 = 6822 OR f1 = 8071 OR f1 = 7602 OR f1 = 9991 OR f1 = 8262 OR f1 = 7231 OR f1 = 5047 OR f1 = 1006 OR f1 = 7705 OR f1 = 8326 OR f1 = 8802 OR f1 = 9186 OR f1 = 6109 OR f1 = 9132 OR f1 = 3978 OR f1 = 8349 OR f1 = 7955 OR f1 = 7460 OR f1 = 7195 OR f1 = 9279 OR f1 = 3111 OR f1 = 2763 OR f1 = 4063 OR f1 = 486 OR f1 = 4665 OR f1 = 5104 OR f1 = 9965 OR f1 = 4313 OR f1 = 629 OR f1 = 2465 OR f1 = 3808 OR f1 = 7010 OR f1 = 6826 OR f1 = 1099 OR f1 = 9537 OR f1 = 2022 OR f1 = 367 OR f1 = 3694 OR f1 = 3452 OR f1 = 1056 OR f1 = 4616 OR f1 = 1925 OR f1 = 989 OR f1 = 6183 OR f1 = 6153 OR f1 = 8823 OR f1 = 5458 OR f1 = 805 OR f1 = 1202 OR f1 = 8489 OR f1 = 8111 OR f1 = 5634 OR f1 = 2755 OR f1 = 4403 OR f1 = 9867 OR f1 = 2655 OR f1 = 7077 OR f1 = 6567 OR f1 = 7612 OR f1 = 8546 OR f1 = 150 OR f1 = 4137 OR f1 = 8371 OR f1 = 9623 OR f1 = 8995 OR f1 = 7136 OR f1 = 1502 OR f1 = 4219 OR f1 = 9814 OR f1 = 9932 OR f1 = 6170 OR f1 = 8458 OR f1 = 7870 OR f1 = 9375 OR f1 = 8632 OR f1 = 4966 OR f1 = 223 OR f1 = 435 OR f1 = 9920 OR f1 = 7746 OR f1 = 9710 OR f1 = 443 OR f1 = 2160 OR f1 = 5903 OR f1 = 936 OR f1 = 5930 OR f1 = 5276 OR f1 = 9312 OR f1 = 8636 OR f1 = 6109 OR f1 = 6568 OR f1 = 1944 OR f1 = 5741 OR f1 = 7762 OR f1 = 6713 OR f1 = 4213 OR f1 = 1629 OR f1 = 7827 OR f1 = 1483 OR f1 = 2973 OR f1 = 6408 OR f1 = 4739 OR f1 = 5076 OR f1 = 6138 OR f1 = 2244 OR f1 = 4685 OR f1 = 6534 OR f1 = 7585 OR f1 = 7122 OR f1 = 408 OR f1 = 9648 OR f1 = 686 OR f1 = 2512 OR f1 = 3696 OR f1 = 413 OR f1 = 1888 OR f1 = 8487 OR f1 = 9281 OR f1 = 5382 OR f1 = 4851 OR f1 = 36 OR f1 = 6325 OR f1 = 6583 OR f1 = 2651 OR f1 = 1332 OR f1 = 3319 OR f1 = 3446 OR f1 = 8546 OR f1 = 9356 OR f1 = 6492 OR f1 = 1467 OR f1 = 8051 OR f1 = 3081 OR f1 = 9269 OR f1 = 4057 OR f1 = 7527 OR f1 = 2610 OR f1 = 3654 OR f1 = 2603 OR f1 = 6295 OR f1 = 2933 OR f1 = 2051 OR f1 = 5472 OR f1 = 9961 OR f1 = 2662 OR f1 = 7617 OR f1 = 2215 OR f1 = 675 OR f1 = 3609 OR f1 = 8706 OR f1 = 975 OR f1 = 8445 OR f1 = 2869 OR f1 = 3056 OR f1 = 583 OR f1 = 3330 OR f1 = 3086 OR f1 = 2169 OR f1 = 7144 OR f1 = 6971 OR f1 = 5166 OR f1 = 633 OR f1 = 784 OR f1 = 5741 OR f1 = 3737 OR f1 = 2667 OR f1 = 3573 OR f1 = 5665 OR f1 = 9334 OR f1 = 7707 OR f1 = 2682 OR f1 = 7850 OR f1 = 8606 OR f1 = 5044 OR f1 = 7014 OR f1 = 1659 OR f1 = 3819 OR f1 = 6375 OR f1 = 6890 OR f1 = 2757 OR f1 = 1388 OR f1 = 1427 OR f1 = 1467 OR f1 = 4877 OR f1 = 2332 OR f1 = 1320 OR f1 = 9601 OR f1 = 4023 OR f1 = 675 OR f1 = 3733 OR f1 = 1459 OR f1 = 6643 OR f1 = 5832 OR f1 = 6352 OR f1 = 5273 OR f1 = 9537 OR f1 = 5454 OR f1 = 7712 OR f1 = 1330 OR f1 = 2308 OR f1 = 7741 OR f1 = 2214 OR f1 = 2964 OR f1 = 800 OR f1 = 5662 OR f1 = 6812 OR f1 = 9632 OR f1 = 2126 OR f1 = 9487 OR f1 = 5247 OR f1 = 7622 OR f1 = 4503 OR f1 = 2981 OR f1 = 6468 OR f1 = 3064 OR f1 = 9391 OR f1 = 4951 OR f1 = 8776 OR f1 = 1035 OR f1 = 9555 OR f1 = 532 OR f1 = 2700 OR f1 = 450 OR f1 = 3830 OR f1 = 3768 OR f1 = 5863 OR f1 = 6099 OR f1 = 730 OR f1 = 2183 OR f1 = 7123 OR f1 = 2307 OR f1 = 1296 OR f1 = 2485 OR f1 = 6044 OR f1 = 8659 OR f1 = 9427 OR f1 = 7373 OR f1 = 2429 OR f1 = 6756 OR f1 = 4822 OR f1 = 8181 OR f1 = 8887 OR f1 = 6123 OR f1 = 9792 OR f1 = 9877 OR f1 = 3760 OR f1 = 5686 OR f1 = 2444 OR f1 = 7186 OR f1 = 2093 OR f1 = 7702 OR f1 = 4189 OR f1 = 3235 OR f1 = 8986 OR f1 = 8298 OR f1 = 1259 OR f1 = 8801 OR f1 = 7222 OR f1 = 2873 OR f1 = 6650 OR f1 = 9296 OR f1 = 8531 OR f1 = 5119 OR f1 = 2838 OR f1 = 6810 OR f1 = 8990 OR f1 = 698 OR f1 = 5210 OR f1 = 1423 OR f1 = 5687 OR f1 = 4466 OR f1 = 6348 OR f1 = 1402 OR f1 = 4788 OR f1 = 1000 OR f1 = 3507 OR f1 = 5350 OR f1 = 53 OR f1 = 5027 OR f1 = 2775 OR f1 = 8277 OR f1 = 2926 OR f1 = 2883 OR f1 = 6776 OR f1 = 7475 OR f1 = 4824 OR f1 = 4535 OR f1 = 5809 OR f1 = 3904 OR f1 = 4800 OR f1 = 1006 OR f1 = 3355 OR f1 = 9645 OR f1 = 3576 OR f1 = 672 OR f1 = 5525 OR f1 = 3950 OR f1 = 2928 OR f1 = 7314 OR f1 = 9411 OR f1 = 5531 OR f1 = 8463 OR f1 = 1333 OR f1 = 6212 OR f1 = 165 OR f1 = 7072 OR f1 = 5307 OR f1 = 8702 OR f1 = 7822 OR f1 = 6919 OR f1 = 1924 OR f1 = 3640 OR f1 = 1077 OR f1 = 1899 OR f1 = 8410 OR f1 = 5170 OR f1 = 6961 OR f1 = 3939 OR f1 = 5062 OR f1 = 1202 OR f1 = 9507 OR f1 = 7639 OR f1 = 8769 OR f1 = 9932 OR f1 = 8732 OR f1 = 8291 OR f1 = 7300 OR f1 = 4500 OR f1 = 6103 OR f1 = 4880 OR f1 = 8366 OR f1 = 2793 OR f1 = 5697 OR f1 = 8641 OR f1 = 8533 OR f1 = 641 OR f1 = 9125 OR f1 = 1458 OR f1 = 5144 OR f1 = 4624 OR f1 = 344 OR f1 = 2653 OR f1 = 8532 OR f1 = 20 OR f1 = 6832 OR f1 = 4677 OR f1 = 8706 OR f1 = 3464 OR f1 = 9827 OR f1 = 4156 OR f1 = 2578 OR f1 = 7711 OR f1 = 5544 OR f1 = 8514 OR f1 = 6567 OR f1 = 2365 OR f1 = 3293 OR f1 = 21 OR f1 = 7544 OR f1 = 7880 OR f1 = 8323 OR f1 = 2677 OR f1 = 6490 OR f1 = 8143 OR f1 = 4465 OR f1 = 2491 OR f1 = 5891 OR f1 = 461 OR f1 = 3711 OR f1 = 7650 OR f1 = 8610 OR f1 = 9054 OR f1 = 1647 OR f1 = 8038 OR f1 = 9165 OR f1 = 4886 OR f1 = 5709 OR f1 = 848 OR f1 = 4033 OR f1 = 3381 OR f1 = 8569 OR f1 = 7902 OR f1 = 6676 OR f1 = 9220 OR f1 = 7747 OR f1 = 2402 OR f1 = 400 OR f1 = 7130 OR f1 = 6878 OR f1 = 1836 OR f1 = 5177 OR f1 = 5782 OR f1 = 6067 OR f1 = 9114 OR f1 = 6742 OR f1 = 9778 OR f1 = 1031 OR f1 = 6684 OR f1 = 9692 OR f1 = 2158 OR f1 = 8958 OR f1 = 1887 OR f1 = 1929 OR f1 = 8295 OR f1 = 3347 OR f1 = 437 OR f1 = 8172 OR f1 = 4884 OR f1 = 1647 OR f1 = 7402 OR f1 = 4624 OR f1 = 4328 OR f1 = 3842 OR f1 = 2371 OR f1 = 13 OR f1 = 2199 OR f1 = 5538 OR f1 = 6464 OR f1 = 1512 OR f1 = 9620 OR f1 = 194 OR f1 = 951 OR f1 = 2335 OR f1 = 5172 OR f1 = 1415 OR f1 = 9420 OR f1 = 599 OR f1 = 3432 OR f1 = 9353 OR f1 = 4125 OR f1 = 4778 OR f1 = 5503 OR f1 = 8866 OR f1 = 8302 OR f1 = 2380 OR f1 = 7983 OR f1 = 4172 OR f1 = 6732 OR f1 = 6320 OR f1 = 9931 OR f1 = 7717 OR f1 = 5120 OR f1 = 6216 OR f1 = 2483 OR f1 = 4091 OR f1 = 7297 OR f1 = 4318 OR f1 = 1013 OR f1 = 6842 OR f1 = 6940 OR f1 = 8042 OR f1 = 6038 OR f1 = 8275 OR f1 = 7870 OR f1 = 2076 OR f1 = 8495 OR f1 = 2559 OR f1 = 1738 OR f1 = 1638 OR f1 = 5122 OR f1 = 9092 OR f1 = 4367 OR f1 = 7398 OR f1 = 549 OR f1 = 9348 OR f1 = 5999 OR f1 = 381 OR f1 = 3695 OR f1 = 2309 OR f1 = 5639 OR f1 = 7694 OR f1 = 5450 OR f1 = 4303 OR f1 = 5150 OR f1 = 623 OR f1 = 8638 OR f1 = 6502 OR f1 = 5788 OR f1 = 7196 OR f1 = 4115 OR f1 = 1415 OR f1 = 9234 OR f1 = 7716 OR f1 = 5228 OR f1 = 3488 OR f1 = 7142 OR f1 = 7378 OR f1 = 435 OR f1 = 8593 OR f1 = 3266 OR f1 = 5342 OR f1 = 565 OR f1 = 8950 OR f1 = 8444 OR f1 = 6044 OR f1 = 3178 OR f1 = 5175 OR f1 = 4018 OR f1 = 1425 OR f1 = 7824 OR f1 = 3637 OR f1 = 8158 OR f1 = 6306 OR f1 = 22 OR f1 = 7123 OR f1 = 9956 OR f1 = 2171 OR f1 = 5233 OR f1 = 5940 OR f1 = 6576 OR f1 = 3544 OR f1 = 187 OR f1 = 1272 OR f1 = 6082 OR f1 = 6417 OR f1 = 8888 OR f1 = 4605 OR f1 = 5045 OR f1 = 5607 OR f1 = 9383 OR f1 = 1981 OR f1 = 945 OR f1 = 9431 OR f1 = 1471 OR f1 = 5646 OR f1 = 2781 OR f1 = 8855 OR f1 = 2059 OR f1 = 1663 OR f1 = 4276 OR f1 = 4592 OR f1 = 3605 OR f1 = 7880 OR f1 = 3408 OR f1 = 1667 OR f1 = 1069 OR f1 = 2161 OR f1 = 8302 OR f1 = 7710 OR f1 = 952 OR f1 = 5798 OR f1 = 8057 OR f1 = 9466 OR f1 = 7500 OR f1 = 9510 OR f1 = 7245 OR f1 = 1987 OR f1 = 7107 OR f1 = 8493 OR f1 = 1071 OR f1 = 238 OR f1 = 5264 OR f1 = 3129 OR f1 = 1653 OR f1 = 3781 OR f1 = 397 OR f1 = 6675 OR f1 = 7719 OR f1 = 2638 OR f1 = 9610 OR f1 = 7380 OR f1 = 6541 OR f1 = 3961 OR f1 = 7170 OR f1 = 6069 OR f1 = 9187 OR f1 = 6064 OR f1 = 8944 OR f1 = 537 OR f1 = 3623 OR f1 = 3338 OR f1 = 5357 OR f1 = 6081 OR f1 = 7340 OR f1 = 2730 OR f1 = 2965 OR f1 = 4489 OR f1 = 8887 OR f1 = 116 OR f1 = 7128 OR f1 = 674 OR f1 = 1631 OR f1 = 1594 OR f1 = 2221 OR f1 = 1527 OR f1 = 5181 OR f1 = 244 OR f1 = 4107 OR f1 = 9136 OR f1 = 6336 OR f1 = 2826 OR f1 = 4886 OR f1 = 8264 OR f1 = 4274 OR f1 = 7023 OR f1 = 3846 OR f1 = 9246 OR f1 = 2951 OR f1 = 3770 OR f1 = 9841 OR f1 = 3546 OR f1 = 1473 OR f1 = 9897 OR f1 = 9688 OR f1 = 886 OR f1 = 1967 OR f1 = 5987 OR f1 = 2046 OR f1 = 3019 OR f1 = 2877 OR f1 = 1864 OR f1 = 9289 OR f1 = 3631 OR f1 = 4730 OR f1 = 6417 OR f1 = 1878 OR f1 = 876 OR f1 = 6035 OR f1 = 5994 OR f1 = 3128 OR f1 = 4167 OR f1 = 7473 OR f1 = 5149 OR f1 = 154 OR f1 = 6804 OR f1 = 1007 OR f1 = 1562 OR f1 = 9860 OR f1 = 4972 OR f1 = 8674 OR f1 = 1374 OR f1 = 7716 OR f1 = 137 OR f1 = 4611 OR f1 = 6832 OR f1 = 1907 OR f1 = 1589 OR f1 = 4352 OR f1 = 8136 OR f1 = 9061 OR f1 = 542 OR f1 = 4104 OR f1 = 5366 OR f1 = 8501 OR f1 = 6463 OR f1 = 3962 OR f1 = 410 OR f1 = 6998 OR f1 = 224 OR f1 = 629 OR f1 = 4482 OR f1 = 9255 OR f1 = 3051 OR f1 = 3800 OR f1 = 3473 OR f1 = 9059 OR f1 = 3262 OR f1 = 7180 OR f1 = 7369 OR f1 = 8907 OR f1 = 6505 OR f1 = 7402 OR f1 = 3924 OR f1 = 2454 OR f1 = 9333 OR f1 = 9431 OR f1 = 9401 OR f1 = 8622 OR f1 = 7935 OR f1 = 9731 OR f1 = 9757 OR f1 = 8375 OR f1 = 4829 OR f1 = 6265 OR f1 = 585 OR f1 = 1122 OR f1 = 1697 OR f1 = 5823 OR f1 = 4312 OR f1 = 5694 OR f1 = 8059 OR f1 = 4409 OR f1 = 7834 OR f1 = 5576 OR f1 = 757 OR f1 = 5547 OR f1 = 5864 OR f1 = 4764 OR f1 = 8028 OR f1 = 4145 OR f1 = 6661 OR f1 = 4854 OR f1 = 6225 OR f1 = 1823 OR f1 = 4696 OR f1 = 3242 OR f1 = 8534 OR f1 = 245 OR f1 = 6193 OR f1 = 3564 OR f1 = 103 OR f1 = 6185 OR f1 = 3579 OR f1 = 8747 OR f1 = 676 OR f1 = 7788 OR f1 = 1869 OR f1 = 9943 OR f1 = 2893 OR f1 = 6612 OR f1 = 9797 OR f1 = 9067 OR f1 = 8306 OR f1 = 2358 OR f1 = 3434 OR f1 = 3340 OR f1 = 472 OR f1 = 7737 OR f1 = 8501 OR f1 = 8295 OR f1 = 9136 OR f1 = 7071 OR f1 = 4268 OR f1 = 5712 OR f1 = 8720 OR f1 = 9475 OR f1 = 7415 OR f1 = 148 OR f1 = 608 OR f1 = 8320 OR f1 = 9840 OR f1 = 3937 OR f1 = 1886 OR f1 = 4930 OR f1 = 9237 OR f1 = 5841 OR f1 = 5323 OR f1 = 3686 OR f1 = 5487 OR f1 = 2796 OR f1 = 9132 OR f1 = 6008 OR f1 = 9007 OR f1 = 9248 OR f1 = 9263 OR f1 = 9954 OR f1 = 2957 OR f1 = 7191 OR f1 = 5743 OR f1 = 9937 OR f1 = 4287 OR f1 = 9702 OR f1 = 6061 OR f1 = 3646 OR f1 = 7377 OR f1 = 1041 OR f1 = 8865 OR f1 = 3197 OR f1 = 2786 OR f1 = 8724 OR f1 = 7492 OR f1 = 2233 OR f1 = 5294 OR f1 = 3224 OR f1 = 8255 OR f1 = 4649 OR f1 = 7727 OR f1 = 8346 OR f1 = 8547 OR f1 = 7499 OR f1 = 6997 OR f1 = 2359 OR f1 = 8711 OR f1 = 8223 OR f1 = 6794 OR f1 = 6383 OR f1 = 2047 OR f1 = 2021 OR f1 = 3545 OR f1 = 3053 OR f1 = 2086 OR f1 = 4284 OR f1 = 2850 OR f1 = 9307 OR f1 = 8458 OR f1 = 8001 OR f1 = 2715 OR f1 = 1294 OR f1 = 9075 OR f1 = 2582 OR f1 = 4571 OR f1 = 8121 OR f1 = 4362 OR f1 = 888 OR f1 = 3683 OR f1 = 4335 OR f1 = 8947 OR f1 = 5737 OR f1 = 4387 OR f1 = 4031 OR f1 = 9546 OR f1 = 4560 OR f1 = 386 OR f1 = 8029 OR f1 = 2967 OR f1 = 8249 OR f1 = 9570 OR f1 = 6678 OR f1 = 7678 OR f1 = 1299 OR f1 = 4874 OR f1 = 4797 OR f1 = 6018 OR f1 = 3050 OR f1 = 7648 OR f1 = 253 OR f1 = 9518 OR f1 = 3151 OR f1 = 5602 OR f1 = 1276 OR f1 = 7009 OR f1 = 2803 OR f1 = 2360 OR f1 = 5338 OR f1 = 7125 OR f1 = 4690 OR f1 = 4616 OR f1 = 1470 OR f1 = 1021 OR f1 = 4177 OR f1 = 9713 OR f1 = 5327 OR f1 = 2747 OR f1 = 3523 OR f1 = 1547 OR f1 = 948 OR f1 = 8770 OR f1 = 7635 OR f1 = 626 OR f1 = 3783 OR f1 = 4309 OR f1 = 2365 OR f1 = 5269 OR f1 = 9341 OR f1 = 7489 OR f1 = 8076 OR f1 = 639 OR f1 = 4734 OR f1 = 7901 OR f1 = 8577 OR f1 = 1694 OR f1 = 6537 OR f1 = 2762 OR f1 = 4065 OR f1 = 3999 OR f1 = 7445 OR f1 = 2820 OR f1 = 7092 OR f1 = 6334 OR f1 = 6927 OR f1 = 115 OR f1 = 7838 OR f1 = 3792 OR f1 = 4641 OR f1 = 2520 OR f1 = 7004 OR f1 = 2606 OR f1 = 6485 OR f1 = 7022 OR f1 = 1419 OR f1 = 4616 OR f1 = 8456 OR f1 = 8742 OR f1 = 346 OR f1 = 5272 OR f1 = 8645 OR f1 = 6913 OR f1 = 6706 OR f1 = 2348 OR f1 = 5933 OR f1 = 2118 OR f1 = 6120 OR f1 = 1600 OR f1 = 9763 OR f1 = 8453 OR f1 = 9375 OR f1 = 9891 OR f1 = 7304 OR f1 = 926 OR f1 = 8246 OR f1 = 486 OR f1 = 783 OR f1 = 3007 OR f1 = 1740 OR f1 = 8818 OR f1 = 7403 OR f1 = 7048 OR f1 = 4583 OR f1 = 2402 OR f1 = 5615 OR f1 = 2383
----
SELECT * FROM t1 WHERE f1 = 1589 OR f1 = 9099 OR f1 = 4475 OR f1 = 5169 OR f1 = 2830 OR f1 = 455 OR f1 = 4669 OR f1 = 5881 OR f1 = 7122 OR f1 = 3406 OR f1 = 2639 OR f1 = 4815 OR f1 = 3279 OR f1 = 9708 OR f1 = 950 OR f1 = 379 OR f1 = 788 OR f1 = 6319 OR f1 = 9812 OR f1 = 8277 OR f1 = 9137 OR f1 = 4328 OR f1 = 9425 OR f1 = 6553 OR f1 = 3765 OR f1 = 2508 OR f1 = 8778 OR f1 = 4257 OR f1 = 4328 OR f1 = 8389 OR f1 = 4707 OR f1 = 8113 OR f1 = 1516 OR f1 = 2955 OR f1 = 3664 OR f1 = 1667 OR f1 = 5948 OR f1 = 4185 OR f1 = 115 OR f1 = 9360 OR f1 = 9644 OR f1 = 4534 OR f1 = 1933 OR f1 = 7064 OR f1 = 603 OR f1 = 3941 OR f1 = 25 OR f1 = 7860 OR f1 = 7078 OR f1 = 4597 OR f1 = 8228 OR f1 = 3079 OR f1 = 1722 OR f1 = 9509 OR f1 = 6305 OR f1 = 6926 OR f1 = 8643 OR f1 = 4971 OR f1 = 144 OR f1 = 2238 OR f1 = 7082 OR f1 = 8617 OR f1 = 9013 OR f1 = 4394 OR f1 = 485 OR f1 = 6024 OR f1 = 4573 OR f1 = 7337 OR f1 = 9414 OR f1 = 2296 OR f1 = 1894 OR f1 = 8346 OR f1 = 6895 OR f1 = 2413 OR f1 = 9623 OR f1 = 9702 OR f1 = 6376 OR f1 = 382 OR f1 = 2537 OR f1 = 1464 OR f1 = 4828 OR f1 = 6524 OR f1 = 226 OR f1 = 1280 OR f1 = 6153 OR f1 = 3583 OR f1 = 8853 OR f1 = 5763 OR f1 = 1985 OR f1 = 3537 OR f1 = 296 OR f1 = 7926 OR f1 = 8505 OR f1 = 9746 OR f1 = 1137 OR f1 = 1525 OR f1 = 8929 OR f1 = 1381 OR f1 = 3240 OR f1 = 2738 OR f1 = 1525 OR f1 = 3889 OR f1 = 7957 OR f1 = 2354 OR f1 = 1319 OR f1 = 7514 OR f1 = 6225 OR f1 = 4618 OR f1 = 6241 OR f1 = 9220 OR f1 = 3824 OR f1 = 8452 OR f1 = 5316 OR f1 = 5742 OR f1 = 952 OR f1 = 7738 OR f1 = 8934 OR f1 = 6251 OR f1 = 8709 OR f1 = 1281 OR f1 = 2807 OR f1 = 1191 OR f1 = 1704 OR f1 = 5670 OR f1 = 7343 OR f1 = 3200 OR f1 = 2394 OR f1 = 3699 OR f1 = 5802 OR f1 = 5318 OR f1 = 8198 OR f1 = 2358 OR f1 = 3809 OR f1 = 3067 OR f1 = 6558 OR f1 = 9784 OR f1 = 7527 OR f1 = 422 OR f1 = 9712 OR f1 = 1505 OR f1 = 666 OR f1 = 7978 OR f1 = 9837 OR f1 = 6095 OR f1 = 2 OR f1 = 4240 OR f1 = 2788 OR f1 = 3238 OR f1 = 5736 OR f1 = 6095 OR f1 = 6044 OR f1 = 3040 OR f1 = 5114 OR f1 = 4076 OR f1 = 7530 OR f1 = 687 OR f1 = 3919 OR f1 = 4908 OR f1 = 4277 OR f1 = 5402 OR f1 = 5965 OR f1 = 5552 OR f1 = 8031 OR f1 = 7067 OR f1 = 5985 OR f1 = 9568 OR f1 = 8374 OR f1 = 1012 OR f1 = 6239 OR f1 = 8280 OR f1 = 4097 OR f1 = 9957 OR f1 = 429 OR f1 = 1086 OR f1 = 1191 OR f1 = 8113 OR f1 = 3296 OR f1 = 9445 OR f1 = 5855 OR f1 = 9533 OR f1 = 5851 OR f1 = 1519 OR f1 = 3685 OR f1 = 2882 OR f1 = 9085 OR f1 = 2689 OR f1 = 2264 OR f1 = 9435 OR f1 = 6277 OR f1 = 8962 OR f1 = 6728 OR f1 = 6089 OR f1 = 6182 OR f1 = 6423 OR f1 = 8329 OR f1 = 1663 OR f1 = 6894 OR f1 = 4285 OR f1 = 4663 OR f1 = 9425 OR f1 = 1695 OR f1 = 4042 OR f1 = 8623 OR f1 = 4329 OR f1 = 6761 OR f1 = 6141 OR f1 = 8699 OR f1 = 473 OR f1 = 2544 OR f1 = 4535 OR f1 = 884 OR f1 = 6803 OR f1 = 9537 OR f1 = 7417 OR f1 = 7073 OR f1 = 6676 OR f1 = 5998 OR f1 = 4444 OR f1 = 1856 OR f1 = 7569 OR f1 = 4873 OR f1 = 2645 OR f1 = 6156 OR f1 = 8509 OR f1 = 4707 OR f1 = 9251 OR f1 = 3196 OR f1 = 2174 OR f1 = 6894 OR f1 = 4549 OR f1 = 2028 OR f1 = 4725 OR f1 = 9476 OR f1 = 1914 OR f1 = 2296 OR f1 = 6367 OR f1 = 3913 OR f1 = 8959 OR f1 = 3578 OR f1 = 1081 OR f1 = 8452 OR f1 = 9145 OR f1 = 5705 OR f1 = 3140 OR f1 = 2082 OR f1 = 9384 OR f1 = 350 OR f1 = 380 OR f1 = 2496 OR f1 = 8857 OR f1 = 7108 OR f1 = 6276 OR f1 = 679 OR f1 = 2128 OR f1 = 3738 OR f1 = 2152 OR f1 = 6798 OR f1 = 625 OR f1 = 793 OR f1 = 3760 OR f1 = 3046 OR f1 = 3889 OR f1 = 8540 OR f1 = 7766 OR f1 = 9662 OR f1 = 2978 OR f1 = 2765 OR f1 = 5015 OR f1 = 6142 OR f1 = 5897 OR f1 = 139 OR f1 = 19 OR f1 = 2030 OR f1 = 1856 OR f1 = 1574 OR f1 = 5312 OR f1 = 4294 OR f1 = 6249 OR f1 = 2112 OR f1 = 3582 OR f1 = 8900 OR f1 = 6947 OR f1 = 5738 OR f1 = 1454 OR f1 = 4114 OR f1 = 5868 OR f1 = 895 OR f1 = 4477 OR f1 = 4653 OR f1 = 7034 OR f1 = 8599 OR f1 = 7551 OR f1 = 3627 OR f1 = 7865 OR f1 = 2032 OR f1 = 3524 OR f1 = 9733 OR f1 = 6469 OR f1 = 1082 OR f1 = 5973 OR f1 = 1274 OR f1 = 3104 OR f1 = 7239 OR f1 = 8669 OR f1 = 3010 OR f1 = 6383 OR f1 = 8582 OR f1 = 9934 OR f1 = 2656 OR f1 = 399 OR f1 = 9346 OR f1 = 6508 OR f1 = 3376 OR f1 = 988 OR f1 = 2090 OR f1 = 9866 OR f1 = 9044 OR f1 = 1631 OR f1 = 6879 OR f1 = 2938 OR f1 = 3231 OR f1 = 4746 OR f1 = 2811 OR f1 = 4569 OR f1 = 1463 OR f1 = 8133 OR f1 = 9183 OR f1 = 7607 OR f1 = 3706 OR f1 = 4738 OR f1 = 6030 OR f1 = 700 OR f1 = 7704 OR f1 = 6072 OR f1 = 8298 OR f1 = 7642 OR f1 = 332 OR f1 = 7159 OR f1 = 7110 OR f1 = 5241 OR f1 = 8519 OR f1 = 7015 OR f1 = 1589 OR f1 = 7342 OR f1 = 8120 OR f1 = 9758 OR f1 = 1706 OR f1 = 8030 OR f1 = 7767 OR f1 = 3263 OR f1 = 3008 OR f1 = 2542 OR f1 = 439 OR f1 = 6153 OR f1 = 6333 OR f1 = 9485 OR f1 = 9601 OR f1 = 7321 OR f1 = 2614 OR f1 = 5807 OR f1 = 1157 OR f1 = 691 OR f1 = 3461 OR f1 = 570 OR f1 = 2508 OR f1 = 1756 OR f1 = 4280 OR f1 = 5794 OR f1 = 1414 OR f1 = 9920 OR f1 = 1068 OR f1 = 6566 OR f1 = 4087 OR f1 = 1541 OR f1 = 7021 OR f1 = 897 OR f1 = 3428 OR f1 = 6648 OR f1 = 1692 OR f1 = 9045 OR f1 = 8195 OR f1 = 151 OR f1 = 4396 OR f1 = 3366 OR f1 = 1932 OR f1 = 6113 OR f1 = 8722 OR f1 = 1766 OR f1 = 4561 OR f1 = 2284 OR f1 = 9307 OR f1 = 2478 OR f1 = 2490 OR f1 = 4597 OR f1 = 7202 OR f1 = 9064 OR f1 = 1789 OR f1 = 5523 OR f1 = 3266 OR f1 = 9234 OR f1 = 7688 OR f1 = 5837 OR f1 = 7192 OR f1 = 7047 OR f1 = 8452 OR f1 = 7872 OR f1 = 2020 OR f1 = 354 OR f1 = 6187 OR f1 = 4934 OR f1 = 3896 OR f1 = 8599 OR f1 = 793 OR f1 = 4069 OR f1 = 7424 OR f1 = 6753 OR f1 = 6295 OR f1 = 228 OR f1 = 2817 OR f1 = 9136 OR f1 = 778 OR f1 = 6087 OR f1 = 609 OR f1 = 122 OR f1 = 9762 OR f1 = 6474 OR f1 = 3058 OR f1 = 2538 OR f1 = 9994 OR f1 = 7047 OR f1 = 5012 OR f1 = 2708 OR f1 = 9507 OR f1 = 9003 OR f1 = 1231 OR f1 = 3816 OR f1 = 1168 OR f1 = 6382 OR f1 = 5679 OR f1 = 3270 OR f1 = 5064 OR f1 = 141 OR f1 = 8193 OR f1 = 5705 OR f1 = 3003 OR f1 = 2836 OR f1 = 5351 OR f1 = 4140 OR f1 = 5875 OR f1 = 9954 OR f1 = 5107 OR f1 = 3530 OR f1 = 3355 OR f1 = 6136 OR f1 = 4971 OR f1 = 6615 OR f1 = 7985 OR f1 = 6301 OR f1 = 7393 OR f1 = 1866 OR f1 = 1216 OR f1 = 6765 OR f1 = 6835 OR f1 = 1391 OR f1 = 332 OR f1 = 6488 OR f1 = 4586 OR f1 = 426 OR f1 = 1729 OR f1 = 5406 OR f1 = 5700 OR f1 = 3374 OR f1 = 9441 OR f1 = 7251 OR f1 = 3602 OR f1 = 4857 OR f1 = 1288 OR f1 = 9903 OR f1 = 1514 OR f1 = 1755 OR f1 = 1704 OR f1 = 501 OR f1 = 5765 OR f1 = 6435 OR f1 = 1726 OR f1 = 6895 OR f1 = 7335 OR f1 = 6320 OR f1 = 5963 OR f1 = 9292 OR f1 = 6130 OR f1 = 9772 OR f1 = 9265 OR f1 = 1952 OR f1 = 8429 OR f1 = 6127 OR f1 = 4291 OR f1 = 9479 OR f1 = 509 OR f1 = 4488 OR f1 = 2251 OR f1 = 8897 OR f1 = 7973 OR f1 = 2862 OR f1 = 6953 OR f1 = 9298 OR f1 = 6925 OR f1 = 591 OR f1 = 1903 OR f1 = 613 OR f1 = 1207 OR f1 = 5593 OR f1 = 803 OR f1 = 5297 OR f1 = 1238 OR f1 = 5049 OR f1 = 6515 OR f1 = 4516 OR f1 = 2475 OR f1 = 9045 OR f1 = 6097 OR f1 = 434 OR f1 = 5566 OR f1 = 8098 OR f1 = 1698 OR f1 = 9856 OR f1 = 6142 OR f1 = 2179 OR f1 = 8318 OR f1 = 4260 OR f1 = 5887 OR f1 = 4692 OR f1 = 2208 OR f1 = 869 OR f1 = 3278 OR f1 = 9140 OR f1 = 4566 OR f1 = 7360 OR f1 = 8444 OR f1 = 5289 OR f1 = 4050 OR f1 = 2631 OR f1 = 4331 OR f1 = 7200 OR f1 = 3036 OR f1 = 6829 OR f1 = 7500 OR f1 = 7108 OR f1 = 2135 OR f1 = 4580 OR f1 = 4905 OR f1 = 7775 OR f1 = 6454 OR f1 = 2856 OR f1 = 3646 OR f1 = 913 OR f1 = 123 OR f1 = 5192 OR f1 = 6095 OR f1 = 7349 OR f1 = 7271 OR f1 = 6092 OR f1 = 2561 OR f1 = 7960 OR f1 = 7786 OR f1 = 4958 OR f1 = 7585 OR f1 = 5983 OR f1 = 7056 OR f1 = 7917 OR f1 = 461 OR f1 = 3145 OR f1 = 9819 OR f1 = 4566 OR f1 = 6509 OR f1 = 9393 OR f1 = 3005 OR f1 = 7031 OR f1 = 8521 OR f1 = 3247 OR f1 = 7887 OR f1 = 8849 OR f1 = 3560 OR f1 = 4831 OR f1 = 4559 OR f1 = 4187 OR f1 = 8799 OR f1 = 9207 OR f1 = 5418 OR f1 = 8434 OR f1 = 4344 OR f1 = 5265 OR f1 = 65 OR f1 = 6202 OR f1 = 8343 OR f1 = 8530 OR f1 = 2534 OR f1 = 6277 OR f1 = 4771 OR f1 = 6822 OR f1 = 8071 OR f1 = 7602 OR f1 = 9991 OR f1 = 8262 OR f1 = 7231 OR f1 = 5047 OR f1 = 1006 OR f1 = 7705 OR f1 = 8326 OR f1 = 8802 OR f1 = 9186 OR f1 = 6109 OR f1 = 9132 OR f1 = 3978 OR f1 = 8349 OR f1 = 7955 OR f1 = 7460 OR f1 = 7195 OR f1 = 9279 OR f1 = 3111 OR f1 = 2763 OR f1 = 4063 OR f1 = 486 OR f1 = 4665 OR f1 = 5104 OR f1 = 9965 OR f1 = 4313 OR f1 = 629 OR f1 = 2465 OR f1 = 3808 OR f1 = 7010 OR f1 = 6826 OR f1 = 1099 OR f1 = 9537 OR f1 = 2022 OR f1 = 367 OR f1 = 3694 OR f1 = 3452 OR f1 = 1056 OR f1 = 4616 OR f1 = 1925 OR f1 = 989 OR f1 = 6183 OR f1 = 6153 OR f1 = 8823 OR f1 = 5458 OR f1 = 805 OR f1 = 1202 OR f1 = 8489 OR f1 = 8111 OR f1 = 5634 OR f1 = 2755 OR f1 = 4403 OR f1 = 9867 OR f1 = 2655 OR f1 = 7077 OR f1 = 6567 OR f1 = 7612 OR f1 = 8546 OR f1 = 150 OR f1 = 4137 OR f1 = 8371 OR f1 = 9623 OR f1 = 8995 OR f1 = 7136 OR f1 = 1502 OR f1 = 4219 OR f1 = 9814 OR f1 = 9932 OR f1 = 6170 OR f1 = 8458 OR f1 = 7870 OR f1 = 9375 OR f1 = 8632 OR f1 = 4966 OR f1 = 223 OR f1 = 435 OR f1 = 9920 OR f1 = 7746 OR f1 = 9710 OR f1 = 443 OR f1 = 2160 OR f1 = 5903 OR f1 = 936 OR f1 = 5930 OR f1 = 5276 OR f1 = 9312 OR f1 = 8636 OR f1 = 6109 OR f1 = 6568 OR f1 = 1944 OR f1 = 5741 OR f1 = 7762 OR f1 = 6713 OR f1 = 4213 OR f1 = 1629 OR f1 = 7827 OR f1 = 1483 OR f1 = 2973 OR f1 = 6408 OR f1 = 4739 OR f1 = 5076 OR f1 = 6138 OR f1 = 2244 OR f1 = 4685 OR f1 = 6534 OR f1 = 7585 OR f1 = 7122 OR f1 = 408 OR f1 = 9648 OR f1 = 686 OR f1 = 2512 OR f1 = 3696 OR f1 = 413 OR f1 = 1888 OR f1 = 8487 OR f1 = 9281 OR f1 = 5382 OR f1 = 4851 OR f1 = 36 OR f1 = 6325 OR f1 = 6583 OR f1 = 2651 OR f1 = 1332 OR f1 = 3319 OR f1 = 3446 OR f1 = 8546 OR f1 = 9356 OR f1 = 6492 OR f1 = 1467 OR f1 = 8051 OR f1 = 3081 OR f1 = 9269 OR f1 = 4057 OR f1 = 7527 OR f1 = 2610 OR f1 = 3654 OR f1 = 2603 OR f1 = 6295 OR f1 = 2933 OR f1 = 2051 OR f1 = 5472 OR f1 = 9961 OR f1 = 2662 OR f1 = 7617 OR f1 = 2215 OR f1 = 675 OR f1 = 3609 OR f1 = 8706 OR f1 = 975 OR f1 = 8445 OR f1 = 2869 OR f1 = 3056 OR f1 = 583 OR f1 = 3330 OR f1 = 3086 OR f1 = 2169 OR f1 = 7144 OR f1 = 6971 OR f1 = 5166 OR f1 = 633 OR f1 = 784 OR f1 = 5741 OR f1 = 3737 OR f1 = 2667 OR f1 = 3573 OR f1 = 5665 OR f1 = 9334 OR f1 = 7707 OR f1 = 2682 OR f1 = 7850 OR f1 = 8606 OR f1 = 5044 OR f1 = 7014 OR f1 = 1659 OR f1 = 3819 OR f1 = 6375 OR f1 = 6890 OR f1 = 2757 OR f1 = 1388 OR f1 = 1427 OR f1 = 1467 OR f1 = 4877 OR f1 = 2332 OR f1 = 1320 OR f1 = 9601 OR f1 = 4023 OR f1 = 675 OR f1 = 3733 OR f1 = 1459 OR f1 = 6643 OR f1 = 5832 OR f1 = 6352 OR f1 = 5273 OR f1 = 9537 OR f1 = 5454 OR f1 = 7712 OR f1 = 1330 OR f1 = 2308 OR f1 = 7741 OR f1 = 2214 OR f1 = 2964 OR f1 = 800 OR f1 = 5662 OR f1 = 6812 OR f1 = 9632 OR f1 = 2126 OR f1 = 9487 OR f1 = 5247 OR f1 = 7622 OR f1 = 4503 OR f1 = 2981 OR f1 = 6468 OR f1 = 3064 OR f1 = 9391 OR f1 = 4951 OR f1 = 8776 OR f1 = 1035 OR f1 = 9555 OR f1 = 532 OR f1 = 2700 OR f1 = 450 OR f1 = 3830 OR f1 = 3768 OR f1 = 5863 OR f1 = 6099 OR f1 = 730 OR f1 = 2183 OR f1 = 7123 OR f1 = 2307 OR f1 = 1296 OR f1 = 2485 OR f1 = 6044 OR f1 = 8659 OR f1 = 9427 OR f1 = 7373 OR f1 = 2429 OR f1 = 6756 OR f1 = 4822 OR f1 = 8181 OR f1 = 8887 OR f1 = 6123 OR f1 = 9792 OR f1 = 9877 OR f1 = 3760 OR f1 = 5686 OR f1 = 2444 OR f1 = 7186 OR f1 = 2093 OR f1 = 7702 OR f1 = 4189 OR f1 = 3235 OR f1 = 8986 OR f1 = 8298 OR f1 = 1259 OR f1 = 8801 OR f1 = 7222 OR f1 = 2873 OR f1 = 6650 OR f1 = 9296 OR f1 = 8531 OR f1 = 5119 OR f1 = 2838 OR f1 = 6810 OR f1 = 8990 OR f1 = 698 OR f1 = 5210 OR f1 = 1423 OR f1 = 5687 OR f1 = 4466 OR f1 = 6348 OR f1 = 1402 OR f1 = 4788 OR f1 = 1000 OR f1 = 3507 OR f1 = 5350 OR f1 = 53 OR f1 = 5027 OR f1 = 2775 OR f1 = 8277 OR f1 = 2926 OR f1 = 2883 OR f1 = 6776 OR f1 = 7475 OR f1 = 4824 OR f1 = 4535 OR f1 = 5809 OR f1 = 3904 OR f1 = 4800 OR f1 = 1006 OR f1 = 3355 OR f1 = 9645 OR f1 = 3576 OR f1 = 672 OR f1 = 5525 OR f1 = 3950 OR f1 = 2928 OR f1 = 7314 OR f1 = 9411 OR f1 = 5531 OR f1 = 8463 OR f1 = 1333 OR f1 = 6212 OR f1 = 165 OR f1 = 7072 OR f1 = 5307 OR f1 = 8702 OR f1 = 7822 OR f1 = 6919 OR f1 = 1924 OR f1 = 3640 OR f1 = 1077 OR f1 = 1899 OR f1 = 8410 OR f1 = 5170 OR f1 = 6961 OR f1 = 3939 OR f1 = 5062 OR f1 = 1202 OR f1 = 9507 OR f1 = 7639 OR f1 = 8769 OR f1 = 9932 OR f1 = 8732 OR f1 = 8291 OR f1 = 7300 OR f1 = 4500 OR f1 = 6103 OR f1 = 4880 OR f1 = 8366 OR f1 = 2793 OR f1 = 5697 OR f1 = 8641 OR f1 = 8533 OR f1 = 641 OR f1 = 9125 OR f1 = 1458 OR f1 = 5144 OR f1 = 4624 OR f1 = 344 OR f1 = 2653 OR f1 = 8532 OR f1 = 20 OR f1 = 6832 OR f1 = 4677 OR f1 = 8706 OR f1 = 3464 OR f1 = 9827 OR f1 = 4156 OR f1 = 2578 OR f1 = 7711 OR f1 = 5544 OR f1 = 8514 OR f1 = 6567 OR f1 = 2365 OR f1 = 3293 OR f1 = 21 OR f1 = 7544 OR f1 = 7880 OR f1 = 8323 OR f1 = 2677 OR f1 = 6490 OR f1 = 8143 OR f1 = 4465 OR f1 = 2491 OR f1 = 5891 OR f1 = 461 OR f1 = 3711 OR f1 = 7650 OR f1 = 8610 OR f1 = 9054 OR f1 = 1647 OR f1 = 8038 OR f1 = 9165 OR f1 = 4886 OR f1 = 5709 OR f1 = 848 OR f1 = 4033 OR f1 = 3381 OR f1 = 8569 OR f1 = 7902 OR f1 = 6676 OR f1 = 9220 OR f1 = 7747 OR f1 = 2402 OR f1 = 400 OR f1 = 7130 OR f1 = 6878 OR f1 = 1836 OR f1 = 5177 OR f1 = 5782 OR f1 = 6067 OR f1 = 9114 OR f1 = 6742 OR f1 = 9778 OR f1 = 1031 OR f1 = 6684 OR f1 = 9692 OR f1 = 2158 OR f1 = 8958 OR f1 = 1887 OR f1 = 1929 OR f1 = 8295 OR f1 = 3347 OR f1 = 437 OR f1 = 8172 OR f1 = 4884 OR f1 = 1647 OR f1 = 7402 OR f1 = 4624 OR f1 = 4328 OR f1 = 3842 OR f1 = 2371 OR f1 = 13 OR f1 = 2199 OR f1 = 5538 OR f1 = 6464 OR f1 = 1512 OR f1 = 9620 OR f1 = 194 OR f1 = 951 OR f1 = 2335 OR f1 = 5172 OR f1 = 1415 OR f1 = 9420 OR f1 = 599 OR f1 = 3432 OR f1 = 9353 OR f1 = 4125 OR f1 = 4778 OR f1 = 5503 OR f1 = 8866 OR f1 = 8302 OR f1 = 2380 OR f1 = 7983 OR f1 = 4172 OR f1 = 6732 OR f1 = 6320 OR f1 = 9931 OR f1 = 7717 OR f1 = 5120 OR f1 = 6216 OR f1 = 2483 OR f1 = 4091 OR f1 = 7297 OR f1 = 4318 OR f1 = 1013 OR f1 = 6842 OR f1 = 6940 OR f1 = 8042 OR f1 = 6038 OR f1 = 8275 OR f1 = 7870 OR f1 = 2076 OR f1 = 8495 OR f1 = 2559 OR f1 = 1738 OR f1 = 1638 OR f1 = 5122 OR f1 = 9092 OR f1 = 4367 OR f1 = 7398 OR f1 = 549 OR f1 = 9348 OR f1 = 5999 OR f1 = 381 OR f1 = 3695 OR f1 = 2309 OR f1 = 5639 OR f1 = 7694 OR f1 = 5450 OR f1 = 4303 OR f1 = 5150 OR f1 = 623 OR f1 = 8638 OR f1 = 6502 OR f1 = 5788 OR f1 = 7196 OR f1 = 4115 OR f1 = 1415 OR f1 = 9234 OR f1 = 7716 OR f1 = 5228 OR f1 = 3488 OR f1 = 7142 OR f1 = 7378 OR f1 = 435 OR f1 = 8593 OR f1 = 3266 OR f1 = 5342 OR f1 = 565 OR f1 = 8950 OR f1 = 8444 OR f1 = 6044 OR f1 = 3178 OR f1 = 5175 OR f1 = 4018 OR f1 = 1425 OR f1 = 7824 OR f1 = 3637 OR f1 = 8158 OR f1 = 6306 OR f1 = 22 OR f1 = 7123 OR f1 = 9956 OR f1 = 2171 OR f1 = 5233 OR f1 = 5940 OR f1 = 6576 OR f1 = 3544 OR f1 = 187 OR f1 = 1272 OR f1 = 6082 OR f1 = 6417 OR f1 = 8888 OR f1 = 4605 OR f1 = 5045 OR f1 = 5607 OR f1 = 9383 OR f1 = 1981 OR f1 = 945 OR f1 = 9431 OR f1 = 1471 OR f1 = 5646 OR f1 = 2781 OR f1 = 8855 OR f1 = 2059 OR f1 = 1663 OR f1 = 4276 OR f1 = 4592 OR f1 = 3605 OR f1 = 7880 OR f1 = 3408 OR f1 = 1667 OR f1 = 1069 OR f1 = 2161 OR f1 = 8302 OR f1 = 7710 OR f1 = 952 OR f1 = 5798 OR f1 = 8057 OR f1 = 9466 OR f1 = 7500 OR f1 = 9510 OR f1 = 7245 OR f1 = 1987 OR f1 = 7107 OR f1 = 8493 OR f1 = 1071 OR f1 = 238 OR f1 = 5264 OR f1 = 3129 OR f1 = 1653 OR f1 = 3781 OR f1 = 397 OR f1 = 6675 OR f1 = 7719 OR f1 = 2638 OR f1 = 9610 OR f1 = 7380 OR f1 = 6541 OR f1 = 3961 OR f1 = 7170 OR f1 = 6069 OR f1 = 9187 OR f1 = 6064 OR f1 = 8944 OR f1 = 537 OR f1 = 3623 OR f1 = 3338 OR f1 = 5357 OR f1 = 6081 OR f1 = 7340 OR f1 = 2730 OR f1 = 2965 OR f1 = 4489 OR f1 = 8887 OR f1 = 116 OR f1 = 7128 OR f1 = 674 OR f1 = 1631 OR f1 = 1594 OR f1 = 2221 OR f1 = 1527 OR f1 = 5181 OR f1 = 244 OR f1 = 4107 OR f1 = 9136 OR f1 = 6336 OR f1 = 2826 OR f1 = 4886 OR f1 = 8264 OR f1 = 4274 OR f1 = 7023 OR f1 = 3846 OR f1 = 9246 OR f1 = 2951 OR f1 = 3770 OR f1 = 9841 OR f1 = 3546 OR f1 = 1473 OR f1 = 9897 OR f1 = 9688 OR f1 = 886 OR f1 = 1967 OR f1 = 5987 OR f1 = 2046 OR f1 = 3019 OR f1 = 2877 OR f1 = 1864 OR f1 = 9289 OR f1 = 3631 OR f1 = 4730 OR f1 = 6417 OR f1 = 1878 OR f1 = 876 OR f1 = 6035 OR f1 = 5994 OR f1 = 3128 OR f1 = 4167 OR f1 = 7473 OR f1 = 5149 OR f1 = 154 OR f1 = 6804 OR f1 = 1007 OR f1 = 1562 OR f1 = 9860 OR f1 = 4972 OR f1 = 8674 OR f1 = 1374 OR f1 = 7716 OR f1 = 137 OR f1 = 4611 OR f1 = 6832 OR f1 = 1907 OR f1 = 1589 OR f1 = 4352 OR f1 = 8136 OR f1 = 9061 OR f1 = 542 OR f1 = 4104 OR f1 = 5366 OR f1 = 8501 OR f1 = 6463 OR f1 = 3962 OR f1 = 410 OR f1 = 6998 OR f1 = 224 OR f1 = 629 OR f1 = 4482 OR f1 = 9255 OR f1 = 3051 OR f1 = 3800 OR f1 = 3473 OR f1 = 9059 OR f1 = 3262 OR f1 = 7180 OR f1 = 7369 OR f1 = 8907 OR f1 = 6505 OR f1 = 7402 OR f1 = 3924 OR f1 = 2454 OR f1 = 9333 OR f1 = 9431 OR f1 = 9401 OR f1 = 8622 OR f1 = 7935 OR f1 = 9731 OR f1 = 9757 OR f1 = 8375 OR f1 = 4829 OR f1 = 6265 OR f1 = 585 OR f1 = 1122 OR f1 = 1697 OR f1 = 5823 OR f1 = 4312 OR f1 = 5694 OR f1 = 8059 OR f1 = 4409 OR f1 = 7834 OR f1 = 5576 OR f1 = 757 OR f1 = 5547 OR f1 = 5864 OR f1 = 4764 OR f1 = 8028 OR f1 = 4145 OR f1 = 6661 OR f1 = 4854 OR f1 = 6225 OR f1 = 1823 OR f1 = 4696 OR f1 = 3242 OR f1 = 8534 OR f1 = 245 OR f1 = 6193 OR f1 = 3564 OR f1 = 103 OR f1 = 6185 OR f1 = 3579 OR f1 = 8747 OR f1 = 676 OR f1 = 7788 OR f1 = 1869 OR f1 = 9943 OR f1 = 2893 OR f1 = 6612 OR f1 = 9797 OR f1 = 9067 OR f1 = 8306 OR f1 = 2358 OR f1 = 3434 OR f1 = 3340 OR f1 = 472 OR f1 = 7737 OR f1 = 8501 OR f1 = 8295 OR f1 = 9136 OR f1 = 7071 OR f1 = 4268 OR f1 = 5712 OR f1 = 8720 OR f1 = 9475 OR f1 = 7415 OR f1 = 148 OR f1 = 608 OR f1 = 8320 OR f1 = 9840 OR f1 = 3937 OR f1 = 1886 OR f1 = 4930 OR f1 = 9237 OR f1 = 5841 OR f1 = 5323 OR f1 = 3686 OR f1 = 5487 OR f1 = 2796 OR f1 = 9132 OR f1 = 6008 OR f1 = 9007 OR f1 = 9248 OR f1 = 9263 OR f1 = 9954 OR f1 = 2957 OR f1 = 7191 OR f1 = 5743 OR f1 = 9937 OR f1 = 4287 OR f1 = 9702 OR f1 = 6061 OR f1 = 3646 OR f1 = 7377 OR f1 = 1041 OR f1 = 8865 OR f1 = 3197 OR f1 = 2786 OR f1 = 8724 OR f1 = 7492 OR f1 = 2233 OR f1 = 5294 OR f1 = 3224 OR f1 = 8255 OR f1 = 4649 OR f1 = 7727 OR f1 = 8346 OR f1 = 8547 OR f1 = 7499 OR f1 = 6997 OR f1 = 2359 OR f1 = 8711 OR f1 = 8223 OR f1 = 6794 OR f1 = 6383 OR f1 = 2047 OR f1 = 2021 OR f1 = 3545 OR f1 = 3053 OR f1 = 2086 OR f1 = 4284 OR f1 = 2850 OR f1 = 9307 OR f1 = 8458 OR f1 = 8001 OR f1 = 2715 OR f1 = 1294 OR f1 = 9075 OR f1 = 2582 OR f1 = 4571 OR f1 = 8121 OR f1 = 4362 OR f1 = 888 OR f1 = 3683 OR f1 = 4335 OR f1 = 8947 OR f1 = 5737 OR f1 = 4387 OR f1 = 4031 OR f1 = 9546 OR f1 = 4560 OR f1 = 386 OR f1 = 8029 OR f1 = 2967 OR f1 = 8249 OR f1 = 9570 OR f1 = 6678 OR f1 = 7678 OR f1 = 1299 OR f1 = 4874 OR f1 = 4797 OR f1 = 6018 OR f1 = 3050 OR f1 = 7648 OR f1 = 253 OR f1 = 9518 OR f1 = 3151 OR f1 = 5602 OR f1 = 1276 OR f1 = 7009 OR f1 = 2803 OR f1 = 2360 OR f1 = 5338 OR f1 = 7125 OR f1 = 4690 OR f1 = 4616 OR f1 = 1470 OR f1 = 1021 OR f1 = 4177 OR f1 = 9713 OR f1 = 5327 OR f1 = 2747 OR f1 = 3523 OR f1 = 1547 OR f1 = 948 OR f1 = 8770 OR f1 = 7635 OR f1 = 626 OR f1 = 3783 OR f1 = 4309 OR f1 = 2365 OR f1 = 5269 OR f1 = 9341 OR f1 = 7489 OR f1 = 8076 OR f1 = 639 OR f1 = 4734 OR f1 = 7901 OR f1 = 8577 OR f1 = 1694 OR f1 = 6537 OR f1 = 2762 OR f1 = 4065 OR f1 = 3999 OR f1 = 7445 OR f1 = 2820 OR f1 = 7092 OR f1 = 6334 OR f1 = 6927 OR f1 = 115 OR f1 = 7838 OR f1 = 3792 OR f1 = 4641 OR f1 = 2520 OR f1 = 7004 OR f1 = 2606 OR f1 = 6485 OR f1 = 7022 OR f1 = 1419 OR f1 = 4616 OR f1 = 8456 OR f1 = 8742 OR f1 = 346 OR f1 = 5272 OR f1 = 8645 OR f1 = 6913 OR f1 = 6706 OR f1 = 2348 OR f1 = 5933 OR f1 = 2118 OR f1 = 6120 OR f1 = 1600 OR f1 = 9763 OR f1 = 8453 OR f1 = 9375 OR f1 = 9891 OR f1 = 7304 OR f1 = 926 OR f1 = 8246 OR f1 = 486 OR f1 = 783 OR f1 = 3007 OR f1 = 1740 OR f1 = 8818 OR f1 = 7403 OR f1 = 7048 OR f1 = 4583 OR f1 = 2402 OR f1 = 5615 OR f1 = 2383
